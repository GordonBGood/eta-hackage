From f91a3764cb2442f91ecac1f26ca623af5aacc9d1 Mon Sep 17 00:00:00 2001
From: Jyothsna Srinivas <jyothsnasrinivas17@gmail.com>
Date: Mon, 23 Jul 2018 12:07:19 +0530
Subject: [PATCH] Patched

---
 Data/IntMap/CharMap2.hs             |  5 +++++
 Data/IntMap/EnumMap2.hs             |  6 ++++++
 Data/IntSet/EnumSet2.hs             |  6 ++++++
 Text/Regex/TDFA/CorePattern.hs      | 18 ++++++++++++------
 Text/Regex/TDFA/NewDFA/Engine.hs    |  2 +-
 Text/Regex/TDFA/NewDFA/Engine_FA.hs |  2 +-
 java/Utils.java                     | 13 +++++++++++++
 java/eta-0.0.9/Utils.java           | 11 +++++++++++
 regex-tdfa.cabal                    |  4 ++++
 9 files changed, 59 insertions(+), 8 deletions(-)
 create mode 100644 java/Utils.java
 create mode 100644 java/eta-0.0.9/Utils.java

diff --git a/Data/IntMap/CharMap2.hs b/Data/IntMap/CharMap2.hs
index 2a250ac..9d59279 100644
--- a/Data/IntMap/CharMap2.hs
+++ b/Data/IntMap/CharMap2.hs
@@ -20,7 +20,12 @@ newtype CharMap a = CharMap {unCharMap :: M.IntMap a} deriving (Eq,Ord,Read,Show
 
 instance Monoid (CharMap a) where
   mempty = CharMap mempty
+#if !MIN_VERSION_base(4,10,0)
   CharMap x `mappend` CharMap y = CharMap (x `mappend` y)
+#else
+instance Semigroup (CharMap a) where
+  CharMap x <> CharMap y = CharMap (x `mappend` y)
+#endif
 
 instance Functor CharMap where
   fmap f (CharMap m) = CharMap (fmap f m)
diff --git a/Data/IntMap/EnumMap2.hs b/Data/IntMap/EnumMap2.hs
index b104d65..ac35261 100644
--- a/Data/IntMap/EnumMap2.hs
+++ b/Data/IntMap/EnumMap2.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 module Data.IntMap.EnumMap2 where
 
 import Data.Foldable(Foldable(..))
@@ -12,7 +13,12 @@ newtype EnumMap k a = EnumMap {unEnumMap :: M.IntMap a}
 
 instance Ord k => Monoid (EnumMap k a) where
   mempty = EnumMap mempty
+#if !MIN_VERSION_base(4,10,0)
   EnumMap x `mappend` EnumMap y = EnumMap (x `mappend` y)
+#else
+instance Ord k => Semigroup (EnumMap k a) where
+  EnumMap x <> EnumMap y = EnumMap (x `mappend` y)
+#endif
 
 instance Ord k => Functor (EnumMap k) where
   fmap f (EnumMap m) = EnumMap (fmap f m)
diff --git a/Data/IntSet/EnumSet2.hs b/Data/IntSet/EnumSet2.hs
index 35484ab..346de97 100644
--- a/Data/IntSet/EnumSet2.hs
+++ b/Data/IntSet/EnumSet2.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 module Data.IntSet.EnumSet2 where
 
 import qualified Data.IntSet as S
@@ -9,7 +10,12 @@ newtype EnumSet e = EnumSet {unEnumSet :: S.IntSet}
 
 instance Monoid (EnumSet e) where
   mempty = EnumSet mempty
+#if !MIN_VERSION_base(4,10,0)
   EnumSet x `mappend` EnumSet y = EnumSet (x `mappend` y)
+#else
+instance Semigroup (EnumSet e) where
+  EnumSet x <> EnumSet y = EnumSet (x `mappend` y)
+#endif
 
 (\\) :: (Enum e) => EnumSet e -> EnumSet e -> EnumSet e
 (\\) (EnumSet s1) (EnumSet s2) = EnumSet ((S.\\) s1 s2)
diff --git a/Text/Regex/TDFA/CorePattern.hs b/Text/Regex/TDFA/CorePattern.hs
index 12197eb..64a75f2 100644
--- a/Text/Regex/TDFA/CorePattern.hs
+++ b/Text/Regex/TDFA/CorePattern.hs
@@ -30,6 +30,7 @@
 -- (start) looking for the first with an embedded PGroup can be found
 -- and the PGroup free elements can be wrapped in some new PNOTAG
 -- semantic indicator.
+{-# LANGUAGE CPP #-}
 module Text.Regex.TDFA.CorePattern(Q(..),P(..),WhichTest(..),Wanted(..)
                                   ,TestInfo,OP(..),SetTestInfo(..),NullView
                                   ,patternToQ,cleanNullView,cannotAccept,mustAccept) where
@@ -89,7 +90,12 @@ newtype SetTestInfo = SetTestInfo {getTests :: EnumMap WhichTest (EnumSet DoPa)}
 
 instance Monoid SetTestInfo where
   mempty = SetTestInfo mempty
+#if !MIN_VERSION_base(4,10,0)
   SetTestInfo x `mappend` SetTestInfo y = SetTestInfo (x `mappend` y)
+#else
+instance Semigroup SetTestInfo where
+  SetTestInfo x <> SetTestInfo y = SetTestInfo (x <> y)
+#endif
 
 instance Show SetTestInfo where
   show (SetTestInfo sti) = "SetTestInfo "++show (mapSnd (Set.toList) $ Map.assocs sti)
@@ -245,7 +251,7 @@ cannotAccept q = maybe False (0==) $ snd . takes $ q
 -- from the dfs of the children and simultaneously down in the form of
 -- pre and post HandleTag data.  This bidirectional flow is handled
 -- declaratively by using the MonadFix (i.e. mdo).
--- 
+--
 -- Invariant: A tag should exist in Q in exactly one place (and will
 -- be in a preTag,postTag, or getOrbit field).  This is partly because
 -- PGroup needs to know the tags are around precisely the expression
@@ -260,10 +266,10 @@ cannotAccept q = maybe False (0==) $ snd . takes $ q
 --
 -- There is a final "qwin of Q {postTag=ISet.singleton 1}" and an
 -- implied initial index tag of 0.
--- 
+--
 -- favoring pushing Apply into the child postTag makes PGroup happier
 
-type PM = RWS (Maybe GroupIndex) [Either Tag GroupInfo] ([OP]->[OP],Tag) 
+type PM = RWS (Maybe GroupIndex) [Either Tag GroupInfo] ([OP]->[OP],Tag)
 type HHQ = HandleTag  -- m1 : info about left boundaary / preTag
         -> HandleTag  -- m2 : info about right boundary / postTag
         -> PM Q
@@ -294,7 +300,7 @@ partitionEither = helper id id where
 --       and lazily looks resetGroupTags from aGroups, the result of all writer (Right _)
 --       preReset stores the resetGroupTags result of the lookup in the tree
 --     makeOrbit sends some tags to the writer (Left _)
---     withOrbit listens to children send orbit info to writer for resetOrbitTags 
+--     withOrbit listens to children send orbit info to writer for resetOrbitTags
 --   nullQ depends m1 m2 and resetOrbitTags and resetGroupTags and is sent up the tree
 patternToQ :: CompOption -> (Pattern,(GroupIndex,DoPa)) -> (Q,Array Tag OP,Array GroupIndex [GroupInfo])
 patternToQ compOpt (pOrig,(maxGroupIndex,_)) = (tnfa,aTags,aGroups) where
@@ -370,7 +376,7 @@ patternToQ compOpt (pOrig,(maxGroupIndex,_)) = (tnfa,aTags,aGroups) where
   -- withParent uses MonadReader(local) to set getParentIndex to return (Just this)
   -- withParent uses MonadWriter(listens to makeGroup/Right) to return contained group indices (stopTag)
   -- withParent is only safe if getParentIndex has been checked to be not equal to Nothing (see PGroup below)
-  -- Note use of laziness: the immediate children's group index is used to look up all copies of the 
+  -- Note use of laziness: the immediate children's group index is used to look up all copies of the
   -- group in aGroups, including copies that are not immediate children.
   withParent :: GroupIndex -> PM a -> PM (a,[Tag])
   withParent this = local (const (Just this)) . listens childGroupInfo
@@ -626,5 +632,5 @@ addTagsToNullView tags oldNV= do
 
 
 -- xxx todo
--- 
+--
 -- see of PNonEmpty -> NonEmpty -> TNFA is really smarter than POr about tags
diff --git a/Text/Regex/TDFA/NewDFA/Engine.hs b/Text/Regex/TDFA/NewDFA/Engine.hs
index 46e6717..99c56bd 100644
--- a/Text/Regex/TDFA/NewDFA/Engine.hs
+++ b/Text/Regex/TDFA/NewDFA/Engine.hs
@@ -696,7 +696,7 @@ updateCopy ((_i1,instructions),oldPos,newOrbit) preTag s2 i2 = do
 {- USING memcpy TO COPY STUARRAY DATA -}
 
 -- #ifdef __GLASGOW_HASKELL__
-foreign import ccall unsafe "memcpy"
+foreign import java unsafe "@static eta.regex_tdfa.memcpy"
     memcpy :: MutableByteArray# RealWorld -> MutableByteArray# RealWorld -> Int# -> IO ()
 
 {-
diff --git a/Text/Regex/TDFA/NewDFA/Engine_FA.hs b/Text/Regex/TDFA/NewDFA/Engine_FA.hs
index 41b29b0..0012bbb 100644
--- a/Text/Regex/TDFA/NewDFA/Engine_FA.hs
+++ b/Text/Regex/TDFA/NewDFA/Engine_FA.hs
@@ -554,7 +554,7 @@ updateCopy ((_i1,instructions),oldPos,newOrbit) preTag s2 i2 = do
 {- USING memcpy TO COPY STUARRAY DATA -}
 
 -- #ifdef __GLASGOW_HASKELL__
-foreign import ccall unsafe "memcpy"
+foreign import java unsafe "@static eta.regex_tdfa.memcpy"
     memcpy :: MutableByteArray# RealWorld -> MutableByteArray# RealWorld -> Int# -> IO ()
 
 {-
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..1308679
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,13 @@
+package eta.regex_tdfa;
+
+import java.nio.ByteBuffer;
+import eta.runtime.io.StgByteArray;
+
+public class Utils {
+    public static void memcpy(StgByteArray destArray, StgByteArray srcArray, int size) {
+        ByteBuffer dest = destArray.buf.duplicate();
+        ByteBuffer src = srcArray.buf.duplicate();
+        eta.base.Utils.c_memcpy(dest, src, size);
+    }
+
+}
diff --git a/java/eta-0.0.9/Utils.java b/java/eta-0.0.9/Utils.java
new file mode 100644
index 0000000..5acc6e3
--- /dev/null
+++ b/java/eta-0.0.9/Utils.java
@@ -0,0 +1,11 @@
+package eta.regex_tdfa;
+
+import java.nio.ByteBuffer;
+import eta.runtime.io.ByteArray;
+
+public class Utils {
+    public static void memcpy(ByteArray destArray, ByteArray srcArray, int size) {
+        eta.base.Utils.c_memcpy(destArray.bufferAddress, srcArray.bufferAddress, size);
+    }
+
+}
diff --git a/regex-tdfa.cabal b/regex-tdfa.cabal
index 5f4ed93..869a279 100644
--- a/regex-tdfa.cabal
+++ b/regex-tdfa.cabal
@@ -62,5 +62,9 @@ library
   Buildable:              True
   Extensions:             MultiParamTypeClasses, FunctionalDependencies, BangPatterns, MagicHash, RecursiveDo, NoMonoPatBinds, ForeignFunctionInterface, UnboxedTuples, TypeOperators, FlexibleContexts, ExistentialQuantification, UnliftedFFITypes, TypeSynonymInstances, FlexibleInstances
   GHC-Options:            -Wall -funbox-strict-fields -fspec-constr-count=10 -O2 -fno-warn-orphans
+  if impl(eta >= 0.0.9)
+    Java-Sources:          java/eta-0.0.9/Utils.java
+  else
+    Java-Sources:          java/Utils.java
   if flag(devel)
     ghc-prof-options: -auto-all
-- 
2.15.2 (Apple Git-101.1)

