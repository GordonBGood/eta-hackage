From 6913978b1c69529bac5fb08fb158c4e311f8162c Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Mon, 13 Aug 2018 14:17:20 +0530
Subject: [PATCH] Patched

---
 Crypto/Random/Entropy.hs | 33 ++++++++++++++-------------------
 crypto-random.cabal      | 19 +------------------
 java/Utils.java          | 15 +++++++++++++++
 3 files changed, 30 insertions(+), 37 deletions(-)
 create mode 100644 java/Utils.java

diff --git a/Crypto/Random/Entropy.hs b/Crypto/Random/Entropy.hs
index 4d4c636..40c057e 100644
--- a/Crypto/Random/Entropy.hs
+++ b/Crypto/Random/Entropy.hs
@@ -8,6 +8,7 @@
 {-# LANGUAGE CPP #-}
 {-# LANGUAGE ExistentialQuantification #-}
 {-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE ForeignFunctionInterface #-}
 module Crypto.Random.Entropy
     ( EntropyPool
     , createEntropyPool
@@ -32,27 +33,21 @@ import Foreign.Ptr (plusPtr, Ptr)
 import Foreign.ForeignPtr (withForeignPtr)
 
 import Crypto.Random.Entropy.Source
-#ifdef SUPPORT_RDRAND
-import Crypto.Random.Entropy.RDRand
-#endif
-#ifdef WINDOWS
-import Crypto.Random.Entropy.Windows
-#else
-import Crypto.Random.Entropy.Unix
-#endif
+
+data SecureRandom = SecureRandom @java.security.SecureRandom
+
+foreign import java unsafe "@new" newSecureRandom :: IO SecureRandom
+
+foreign import java unsafe "@static eta.crypto_random.Utils.entropyGather"
+  srEntropyGather :: SecureRandom -> Ptr Word8 -> Int -> IO Int
+
+instance EntropySource SecureRandom where
+    entropyOpen    = fmap Just newSecureRandom
+    entropyGather  = srEntropyGather
+    entropyClose _ = return ()
 
 supportedBackends :: [IO (Maybe EntropyBackend)]
-supportedBackends =
-    [
-#ifdef SUPPORT_RDRAND
-    openBackend (undefined :: RDRand),
-#endif
-#ifdef WINDOWS
-    openBackend (undefined :: WinCryptoAPI)
-#else
-    openBackend (undefined :: DevRandom), openBackend (undefined :: DevURandom)
-#endif
-    ]
+supportedBackends = [ openBackend (undefined :: SecureRandom) ]
 
 data EntropyBackend = forall b . EntropySource b => EntropyBackend b
 
diff --git a/crypto-random.cabal b/crypto-random.cabal
index e1e29ba..c3e6d17 100644
--- a/crypto-random.cabal
+++ b/crypto-random.cabal
@@ -24,24 +24,7 @@ Library
                    , Crypto.Random.Entropy
                    , Crypto.Random.Entropy.Source
   ghc-options:       -Wall
-  if os(windows)
-    cpp-options:    -DWINDOWS
-    Build-Depends:  Win32
-    Other-modules:  Crypto.Random.Entropy.Windows
-    extra-libraries: advapi32
-  else
-    Build-Depends:  unix
-    Other-modules:  Crypto.Random.Entropy.Unix
-
-  if arch(i386)
-    cpp-options: -DARCH_X86
-  if arch(x86_64)
-    cpp-options: -DARCH_X86_64
-
-  if arch(x86_64)
-    cpp-options:    -DSUPPORT_RDRAND
-    Other-modules:  Crypto.Random.Entropy.RDRand
-    c-sources:      cbits/rdrand.c
+  java-sources:    java/Utils.java
 
 source-repository head
   type:     git
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..d4bd5de
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,15 @@
+package eta.crypto_random;
+
+import java.security.SecureRandom;
+
+import eta.runtime.io.MemoryManager;
+
+public class Utils {
+    public static int entropyGather(SecureRandom sr, long address, int size) {
+        byte[] bytes = new byte[size];
+        sr.nextBytes(bytes);
+        MemoryManager.getBoundedBuffer(address).put(bytes);
+        return size;
+    }
+}
+
-- 
2.18.0

