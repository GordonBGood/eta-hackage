From c169e0ccb080c3b7bb60ccf209f1c38e8d8413ff Mon Sep 17 00:00:00 2001
From: Jyothsna Srinivas <jyothsnasrinivas17@gmail.com>
Date: Mon, 23 Jul 2018 12:09:17 +0530
Subject: [PATCH] Patched

---
 Text/Regex/TDFA/NewDFA/Engine.hs    | 24 ++++++++++++------------
 Text/Regex/TDFA/NewDFA/Engine_FA.hs | 18 +++++++++---------
 java/Utils.java                     | 13 +++++++++++++
 java/eta-0.0.9/Utils.java           | 11 +++++++++++
 regex-tdfa.cabal                    |  6 +++++-
 5 files changed, 50 insertions(+), 22 deletions(-)
 create mode 100644 java/Utils.java
 create mode 100644 java/eta-0.0.9/Utils.java

diff --git a/Text/Regex/TDFA/NewDFA/Engine.hs b/Text/Regex/TDFA/NewDFA/Engine.hs
index eaf6be1..7d960cd 100644
--- a/Text/Regex/TDFA/NewDFA/Engine.hs
+++ b/Text/Regex/TDFA/NewDFA/Engine.hs
@@ -1,6 +1,6 @@
 -- | This is the code for the main engine.  This captures the posix subexpressions. This 'execMatch'
 -- also dispatches to "Engine_NC", "Engine_FA", and "Engine_FC_NA"
--- 
+--
 -- It is polymorphic over the internal Uncons type class, and specialized to produce the needed
 -- variants.
 module Text.Regex.TDFA.NewDFA.Engine(execMatch) where
@@ -69,7 +69,7 @@ err s = common_error "Text.Regex.TDFA.NewDFA.Engine"  s
 {-# INLINE set #-}
 set :: (MArray a e (S.ST s),Ix i) => a i e -> Int -> e -> S.ST s ()
 set = unsafeWrite
- 
+
 {-# SPECIALIZE execMatch :: Regex -> Position -> Char -> ([] Char) -> [MatchArray] #-}
 {-# SPECIALIZE execMatch :: Regex -> Position -> Char -> (Seq Char) -> [MatchArray] #-}
 {-# SPECIALIZE execMatch :: Regex -> Position -> Char -> SBS.ByteString -> [MatchArray] #-}
@@ -100,7 +100,7 @@ execMatch r@(Regex { regex_dfa = DFA {d_id=didIn,d_dt=dtIn}
   orbitTags :: [Tag]
   !orbitTags = map fst . filter ((Orbit==).snd) . assocs $ aTags
 
-  !test = mkTest newline         
+  !test = mkTest newline
 
   comp :: C s
   comp = {-# SCC "matchHere.comp" #-} ditzyComp'3 aTags
@@ -237,7 +237,7 @@ execMatch r@(Regex { regex_dfa = DFA {d_id=didIn,d_dt=dtIn}
                                     _ -> return Nothing )
                 let compressGroup [((state,_),orbit)] | Seq.null (getOrbits orbit) = return ()
                                                       | otherwise =
-                      set (m_orbit s1) state 
+                      set (m_orbit s1) state
                       . (IMap.insert tag $! (orbit { ordinal = Nothing, getOrbits = mempty}))
                       =<< m_orbit s1 !! state
 
@@ -298,7 +298,7 @@ execMatch r@(Regex { regex_dfa = DFA {d_id=didIn,d_dt=dtIn}
           earlyStart <- fmap minimum $ mapM performTransTo dl
           -- findTrans part 3
           earlyWin <- readSTRef (mq_earliest winQ)
-          if earlyWin < earlyStart 
+          if earlyWin < earlyStart
             then do
               winners <- fmap (foldl' (\ rest ws -> ws : rest) []) $
                            getMQ earlyStart winQ
@@ -376,7 +376,7 @@ execMatch r@(Regex { regex_dfa = DFA {d_id=didIn,d_dt=dtIn}
           set newerPos 0 preTag
           doActions preTag newerPos (newPos winInstructions)
           putMQ (WScratch newerPos) winQ
-                
+
         newWinner preTag ((_sourceIndex,winInstructions),oldPos,_newOrbit) = {-# SCC "goNext.newWinner" #-} do
           newerPos <- newA_ b_tags
           copySTU oldPos newerPos
@@ -437,7 +437,7 @@ putMQ ws (MQ {mq_earliest=earliest,mq_list=list}) = do
     then writeSTRef earliest start >> writeSTRef list [mqa]
     else do
   old <- readSTRef list
-  let !rest = dropWhile (\ m -> start <= mqa_start m) old 
+  let !rest = dropWhile (\ m -> start <= mqa_start m) old
       !new = mqa : rest
   writeSTRef list new
 
@@ -498,7 +498,7 @@ showMS2 s = do
 showWS :: WScratch s -> ST s String
 showWS (WScratch pos) = do
   a <- getAssocs pos
-  return $ unlines [ "WScratch" 
+  return $ unlines [ "WScratch"
                    , indent (show a)]
 -}
 {- CREATING INITIAL MUTABLE SCRATCH DATA STRUCTURES -}
@@ -560,7 +560,7 @@ ditzyComp'3 aTagOP = comp0 where
 
   allcomps :: Tag -> [F s]
   allcomps tag | tag > top = [F (\ _ _ _ _ _ _ -> return EQ)]
-               | otherwise = 
+               | otherwise =
     case aTagOP ! tag of
       Orbit -> F (challenge_Orb tag) : allcomps (succ tag)
       Maximize -> F (challenge_Max tag) : allcomps (succ tag)
@@ -609,7 +609,7 @@ ditzyComp'3 aTagOP = comp0 where
               else return (compare p1 p2)
   challenge_Max _ [] _ _ _ _ _ = err "impossible 9384324"
 
-  challenge_Orb !tag (F next:comps) preTag x1@(_state1,_pos1,orbit1') np1 x2@(_state2,_pos2,orbit2') np2 = 
+  challenge_Orb !tag (F next:comps) preTag x1@(_state1,_pos1,orbit1') np1 x2@(_state2,_pos2,orbit2') np2 =
     let s1 = IMap.lookup tag orbit1'
         s2 = IMap.lookup tag orbit2'
     in case (s1,s2) of
@@ -630,7 +630,7 @@ comparePos :: (ViewL Position) -> (ViewL Position) -> Ordering
 comparePos EmptyL EmptyL = EQ
 comparePos EmptyL _      = GT
 comparePos _      EmptyL = LT
-comparePos (p1 :< ps1) (p2 :< ps2) = 
+comparePos (p1 :< ps1) (p2 :< ps2) =
   compare p1 p2 `mappend` comparePos (viewl ps1) (viewl ps2)
 
 {- CONVERT WINNERS TO MATCHARRAY -}
@@ -697,7 +697,7 @@ updateCopy ((_i1,instructions),oldPos,newOrbit) preTag s2 i2 = do
 {- USING memcpy TO COPY STUARRAY DATA -}
 
 -- #ifdef __GLASGOW_HASKELL__
-foreign import ccall unsafe "memcpy"
+foreign import java unsafe "@static eta.regex_tdfa.memcpy"
     memcpy :: MutableByteArray# RealWorld -> MutableByteArray# RealWorld -> Int# -> IO ()
 
 {-
diff --git a/Text/Regex/TDFA/NewDFA/Engine_FA.hs b/Text/Regex/TDFA/NewDFA/Engine_FA.hs
index e0f45b4..c8d9130 100644
--- a/Text/Regex/TDFA/NewDFA/Engine_FA.hs
+++ b/Text/Regex/TDFA/NewDFA/Engine_FA.hs
@@ -1,7 +1,7 @@
 -- | This is the code for the main engine.  This captures the posix
 -- subexpressions.  There is also a non-capturing engine, and a
 -- testing engine.
--- 
+--
 -- It is polymorphic over the internal Uncons type class, and
 -- specialized to produce the needed variants.
 module Text.Regex.TDFA.NewDFA.Engine_FA(execMatch) where
@@ -60,7 +60,7 @@ set = unsafeWrite
 
 noSource :: ((Index, Instructions),STUArray s Tag Position,OrbitLog)
 noSource = ((-1,err "noSource"),err "noSource",err "noSource")
- 
+
 {-# SPECIALIZE execMatch :: Regex -> Position -> Char -> ([] Char) -> [MatchArray] #-}
 {-# SPECIALIZE execMatch :: Regex -> Position -> Char -> (Seq Char) -> [MatchArray] #-}
 {-# SPECIALIZE execMatch :: Regex -> Position -> Char -> SBS.ByteString -> [MatchArray] #-}
@@ -81,7 +81,7 @@ execMatch (Regex { regex_dfa =  DFA {d_id=didIn,d_dt=dtIn}
   orbitTags :: [Tag]
   !orbitTags = map fst . filter ((Orbit==).snd) . assocs $ aTags
 
-  !test = mkTest newline         
+  !test = mkTest newline
 
   comp :: C s
   comp = {-# SCC "matchHere.comp" #-} ditzyComp'3 aTags
@@ -184,7 +184,7 @@ execMatch (Regex { regex_dfa =  DFA {d_id=didIn,d_dt=dtIn}
                                     _ -> return Nothing )
                 let compressGroup [((state,_),orbit)] | Seq.null (getOrbits orbit) = return ()
                                                       | otherwise =
-                      set (m_orbit s1) state 
+                      set (m_orbit s1) state
                       . (IMap.insert tag $! (orbit { ordinal = Nothing, getOrbits = mempty}))
                       =<< m_orbit s1 !! state
 
@@ -357,7 +357,7 @@ showMS s i = do
 showWS :: WScratch s -> ST s String
 showWS (WScratch pos) = do
   a <- getAssocs pos
-  return $ unlines [ "WScratch" 
+  return $ unlines [ "WScratch"
                    , indent (show a)]
 -}
 {- CREATING INITIAL MUTABLE SCRATCH DATA STRUCTURES -}
@@ -419,7 +419,7 @@ ditzyComp'3 aTagOP = comp0 where
 
   allcomps :: Tag -> [F s]
   allcomps tag | tag > top = [F (\ _ _ _ _ _ _ -> return EQ)]
-               | otherwise = 
+               | otherwise =
     case aTagOP ! tag of
       Orbit -> F (challenge_Orb tag) : allcomps (succ tag)
       Maximize -> F (challenge_Max tag) : allcomps (succ tag)
@@ -468,7 +468,7 @@ ditzyComp'3 aTagOP = comp0 where
               else return (compare p1 p2)
   challenge_Max _ [] _ _ _ _ _ = err "impossible 9384324"
 
-  challenge_Orb !tag (F next:comps) preTag x1@(_state1,_pos1,orbit1') np1 x2@(_state2,_pos2,orbit2') np2 = 
+  challenge_Orb !tag (F next:comps) preTag x1@(_state1,_pos1,orbit1') np1 x2@(_state2,_pos2,orbit2') np2 =
     let s1 = IMap.lookup tag orbit1'
         s2 = IMap.lookup tag orbit2'
     in case (s1,s2) of
@@ -489,7 +489,7 @@ comparePos :: (ViewL Position) -> (ViewL Position) -> Ordering
 comparePos EmptyL EmptyL = EQ
 comparePos EmptyL _      = GT
 comparePos _      EmptyL = LT
-comparePos (p1 :< ps1) (p2 :< ps2) = 
+comparePos (p1 :< ps1) (p2 :< ps2) =
   compare p1 p2 `mappend` comparePos (viewl ps1) (viewl ps2)
 
 {- CONVERT WINNERS TO MATCHARRAY -}
@@ -555,7 +555,7 @@ updateCopy ((_i1,instructions),oldPos,newOrbit) preTag s2 i2 = do
 {- USING memcpy TO COPY STUARRAY DATA -}
 
 -- #ifdef __GLASGOW_HASKELL__
-foreign import ccall unsafe "memcpy"
+foreign import java unsafe "@static eta.regex_tdfa.memcpy"
     memcpy :: MutableByteArray# RealWorld -> MutableByteArray# RealWorld -> Int# -> IO ()
 
 {-
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..1308679
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,13 @@
+package eta.regex_tdfa;
+
+import java.nio.ByteBuffer;
+import eta.runtime.io.StgByteArray;
+
+public class Utils {
+    public static void memcpy(StgByteArray destArray, StgByteArray srcArray, int size) {
+        ByteBuffer dest = destArray.buf.duplicate();
+        ByteBuffer src = srcArray.buf.duplicate();
+        eta.base.Utils.c_memcpy(dest, src, size);
+    }
+
+}
diff --git a/java/eta-0.0.9/Utils.java b/java/eta-0.0.9/Utils.java
new file mode 100644
index 0000000..5acc6e3
--- /dev/null
+++ b/java/eta-0.0.9/Utils.java
@@ -0,0 +1,11 @@
+package eta.regex_tdfa;
+
+import java.nio.ByteBuffer;
+import eta.runtime.io.ByteArray;
+
+public class Utils {
+    public static void memcpy(ByteArray destArray, ByteArray srcArray, int size) {
+        eta.base.Utils.c_memcpy(destArray.bufferAddress, srcArray.bufferAddress, size);
+    }
+
+}
diff --git a/regex-tdfa.cabal b/regex-tdfa.cabal
index 5331e36..f146b9e 100644
--- a/regex-tdfa.cabal
+++ b/regex-tdfa.cabal
@@ -26,7 +26,7 @@ flag devel
   default: False
   manual: True
 
-library 
+library
   Build-Depends:        array              >= 0.4 && < 0.6
                       , base               >= 4 && < 5
                       , bytestring         >= 0.10 && < 0.11
@@ -73,5 +73,9 @@ library
   Buildable:              True
   Extensions:             MultiParamTypeClasses, FunctionalDependencies, BangPatterns, MagicHash, RecursiveDo, NoMonoPatBinds, ForeignFunctionInterface, UnboxedTuples, TypeOperators, FlexibleContexts, ExistentialQuantification, UnliftedFFITypes, TypeSynonymInstances, FlexibleInstances
   GHC-Options:            -Wall -funbox-strict-fields -fspec-constr-count=10 -O2 -fno-warn-orphans
+  if impl(eta >= 0.0.9)
+    Java-Sources:          java/eta-0.0.9/Utils.java
+  else
+    Java-Sources:          java/Utils.java
   if flag(devel)
     ghc-prof-options: -auto-all
-- 
2.15.2 (Apple Git-101.1)

