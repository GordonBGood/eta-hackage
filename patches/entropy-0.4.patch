From 3bc1c74b8efd4047b422a276cc5586204be5d9c3 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Mon, 13 Aug 2018 20:00:22 +0530
Subject: [PATCH] Patched

---
 System/Entropy.hs    | 12 ++------
 System/EntropyJVM.hs | 72 ++++++++++++++++++++++++++++++++++++++++++++
 entropy.cabal        | 34 ++-------------------
 java/Utils.java      | 21 +++++++++++++
 4 files changed, 98 insertions(+), 41 deletions(-)
 create mode 100644 System/EntropyJVM.hs
 create mode 100644 java/Utils.java

diff --git a/System/Entropy.hs b/System/Entropy.hs
index db809f0..96489b2 100644
--- a/System/Entropy.hs
+++ b/System/Entropy.hs
@@ -22,21 +22,13 @@ module System.Entropy
           hGetEntropy,
           closeHandle
         ) where
-#if defined(isWindows)
-import System.EntropyWindows
-#else
-#ifdef XEN
-import System.EntropyXen
-#else
-import System.EntropyNix
-#endif
-#endif
+import System.EntropyJVM
 
 import qualified Data.ByteString as B
 import Control.Exception (bracket)
 
 -- |Get a specific number of bytes of cryptographically
--- secure random data using the *system-specific* sources. 
+-- secure random data using the *system-specific* sources.
 -- (As of 0.4.  Verions <0.4 mixed system and hardware sources)
 --
 -- The returned random value is considered cryptographically secure but not true entropy.
diff --git a/System/EntropyJVM.hs b/System/EntropyJVM.hs
new file mode 100644
index 0000000..e07dc57
--- /dev/null
+++ b/System/EntropyJVM.hs
@@ -0,0 +1,72 @@
+{-# LANGUAGE CPP, ForeignFunctionInterface, BangPatterns, ScopedTypeVariables, MagicHash #-}
+{-|
+ Maintainer: Thomas.DuBuisson@gmail.com
+ Stability: beta
+ Portability: portable
+
+ Obtain entropy from system sources or x86 RDRAND when available.
+
+-}
+
+module System.EntropyJVM
+        ( CryptHandle
+        , openHandle
+        , hGetEntropy
+        , closeHandle
+        , hardwareRandom
+        ) where
+
+import Control.Monad (liftM, when)
+import Data.ByteString as B
+import System.IO.Error (mkIOError, eofErrorType, ioeSetErrorString)
+import Data.Bits (xor)
+
+import Foreign.Ptr
+import Foreign.C.Types
+
+import Java
+import Data.ByteString.Internal as B
+
+foreign import java unsafe "@static eta.entropy.Utils.get_rand_bytes"
+  java_get_rand_bytes :: Ptr CUChar -> CSize -> SecureRandom -> IO CInt
+
+-- import System.Posix (openFd, closeFd, fdReadBuf, OpenMode(..), defaultFileFlags, Fd)
+
+-- |Handle for manual resource management
+data CryptHandle
+    = CH SecureRandom
+
+data SecureRandom = SecureRandom @java.security.SecureRandom
+  deriving Class
+
+foreign import java unsafe "@new" newSecureRandom :: IO SecureRandom
+
+
+-- | Get random values from the hardward RNG or return Nothing if no
+-- supported hardware RNG is available.
+--
+-- Supported hardware:
+--      * RDRAND
+--      * Patches welcome
+hardwareRandom :: Int -> IO (Maybe B.ByteString)
+hardwareRandom n = do
+  random <- newSecureRandom
+  Just <$> hGetEntropy (CH random) n
+
+-- |Open a `CryptHandle`
+openHandle :: IO CryptHandle
+openHandle = do
+  CH `fmap` newSecureRandom
+
+-- |Close the `CryptHandle`
+closeHandle :: CryptHandle -> IO ()
+closeHandle (CH _) = return ()
+
+-- |Read random data from a `CryptHandle`
+hGetEntropy :: CryptHandle -> Int -> IO B.ByteString
+hGetEntropy (CH rand) n =
+  B.create n filler
+ where
+  filler ptr = do
+    r <- java_get_rand_bytes (castPtr ptr) (fromIntegral n) rand
+    when (r/= 0) (fail "entropy library: Something bad occurred on the Java side")
diff --git a/entropy.cabal b/entropy.cabal
index a79b986..768b05d 100644
--- a/entropy.cabal
+++ b/entropy.cabal
@@ -14,10 +14,7 @@ category:       Data, Cryptography
 homepage:       https://github.com/TomMD/entropy
 bug-reports:    https://github.com/TomMD/entropy/issues
 stability:      stable
--- build-type:  Simple
--- ^^ Used for HaLVM
-build-type:     Custom
--- ^^ Test for RDRAND support using 'ghc'
+build-type:  Simple
 cabal-version:  >=1.10
 tested-with:    GHC == 8.2.2
 -- data-files:
@@ -41,37 +38,12 @@ custom-setup
 library
   ghc-options:  -O2
   exposed-modules: System.Entropy
-  if os(windows)
-    other-modules: System.EntropyWindows
-  else {
-       if os(halvm)
-         other-modules: System.EntropyXen
-       else
-         other-modules: System.EntropyNix
-  }
+  other-modules: System.EntropyJVM
   other-extensions:    CPP, ForeignFunctionInterface, BangPatterns,
                        ScopedTypeVariables
   build-depends:       base >= 4.3 && < 5, bytestring
   default-language:    Haskell2010
-  if(os(halvm))
-    cpp-options: -DXEN -DHAVE_RDRAND
-    cc-options:  -DXEN -DHAVE_RDRAND
-  if arch(x86_64)
-    cpp-options: -Darch_x86_64
-    cc-options:  -Darch_x86_64 -O2
-    -- gcc 4.8.2 on i386 fails to compile rdrand.c when using -fPIC!
-    c-sources:    cbits/rdrand.c
-    include-dirs: cbits
-  if arch(i386)
-    cpp-options: -Darch_i386
-    cc-options:  -Darch_i386 -O2
-  if os(windows)
-    cpp-options: -DisWindows
-    cc-options:  -DisWindows
-    extra-libraries: advapi32
-  else
-    if !os(halvm)
-       Build-Depends: unix
+  java-sources:        java/Utils.java
 
 source-repository head
     type:       git
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..3ce7718
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,21 @@
+package eta.entropy;
+
+import eta.runtime.io.MemoryManager;
+import java.security.SecureRandom;
+import java.nio.ByteBuffer;
+
+public class Utils {
+
+    public static int get_rand_bytes(long address, int n, SecureRandom random){
+        ByteBuffer buffer = MemoryManager.getBoundedBuffer(address);
+        buffer.put(randomByteArray(n, random));
+        return 0;
+    }
+
+    private static byte[] randomByteArray(int n, SecureRandom random){
+        byte[] result = new byte[n];
+        random.nextBytes(result);
+        return result;
+    }
+
+}
-- 
2.18.0

