From cdb8288066c37c126e66b134a6aff4f7b71a9802 Mon Sep 17 00:00:00 2001
From: Jyothsna Srinivas <jyothsnasrinivas17@gmail.com>
Date: Sat, 11 Aug 2018 14:43:38 +0530
Subject: [PATCH] Patched

---
 src/Turtle/Line.hs    |  2 +-
 src/Turtle/Pattern.hs |  4 +--
 src/Turtle/Prelude.hs | 95 +++++++++++++++++++++++++++++++--------------------
 src/Turtle/Shell.hs   |  4 +--
 turtle.cabal          | 12 +++----
 5 files changed, 69 insertions(+), 48 deletions(-)

diff --git a/src/Turtle/Line.hs b/src/Turtle/Line.hs
index b8d6800..315599b 100644
--- a/src/Turtle/Line.hs
+++ b/src/Turtle/Line.hs
@@ -60,7 +60,7 @@ instance Exception NewlineForbidden
 
 -- | A line of text (does not contain newlines).
 newtype Line = Line Text
-  deriving (Eq, Ord, Show, Monoid)
+  deriving (Eq, Ord, Show, Monoid, Semigroup)
 
 #if __GLASGOW_HASKELL__ >= 804
 instance Semigroup Line where
diff --git a/src/Turtle/Pattern.hs b/src/Turtle/Pattern.hs
index 79a457e..5e40d1d 100644
--- a/src/Turtle/Pattern.hs
+++ b/src/Turtle/Pattern.hs
@@ -124,7 +124,7 @@ import Prelude -- Fix redundant import warnings
 newtype Pattern a = Pattern { runPattern :: StateT Text [] a }
     deriving (Functor, Applicative, Monad, Alternative, MonadPlus)
 
-#if __GLASGOW_HASKELL__ >= 804
+#if MIN_VERSION_base(4,9,0)
 instance Monoid a => Semigroup (Pattern a) where
   (<>) = mappend
 #endif
@@ -726,7 +726,7 @@ p `sepBy` sep = (p `sepBy1` sep) <|> pure []
 []
 -}
 sepBy1 :: Pattern a -> Pattern b -> Pattern [a]
-p `sepBy1` sep = (:) <$> p <*> many (sep *> p) 
+p `sepBy1` sep = (:) <$> p <*> many (sep *> p)
 
 -- | Like @star dot@ or @star anyChar@, except more efficient
 chars :: Pattern Text
diff --git a/src/Turtle/Prelude.hs b/src/Turtle/Prelude.hs
index 83d9f2e..0d17a31 100644
--- a/src/Turtle/Prelude.hs
+++ b/src/Turtle/Prelude.hs
@@ -260,20 +260,20 @@ module Turtle.Prelude (
     , tebibytes
 
     -- * File status
-    , PosixCompat.FileStatus
+    , FileStatus'
     , stat
     , lstat
     , fileSize
     , accessTime
     , modificationTime
     , statusChangeTime
-    , PosixCompat.isBlockDevice
-    , PosixCompat.isCharacterDevice
-    , PosixCompat.isNamedPipe
-    , PosixCompat.isRegularFile
-    , PosixCompat.isDirectory
-    , PosixCompat.isSymbolicLink
-    , PosixCompat.isSocket
+    , compat_isBlockDevice
+    , compat_isCharacterDevice
+    , compat_isNamedPipe
+    , compat_isRegularFile
+    , compat_isDirectory
+    , compat_isSymbolicLink
+    , compat_isSocket
     , cmin
     , cmax
 
@@ -341,17 +341,17 @@ import qualified System.IO as IO
 import System.IO.Temp (withTempDirectory, withTempFile)
 import System.IO.Error
     (catchIOError, ioeGetErrorType, isPermissionError, isDoesNotExistError)
-import qualified System.PosixCompat as PosixCompat
+-- import qualified System.PosixCompat as PosixCompat
 import qualified System.Process as Process
 #ifdef mingw32_HOST_OS
 import qualified System.Win32 as Win32
-#else
-import System.Posix (
-    openDirStream,
-    readDirStream,
-    closeDirStream,
-    touchFile )
-import System.Posix.Files (createSymbolicLink)      
+-- #else
+-- import System.Posix (
+--     openDirStream,
+--     readDirStream,
+--     closeDirStream,
+--     touchFile )
+-- import System.Posix.Files (createSymbolicLink)
 #endif
 import Prelude hiding (FilePath)
 
@@ -1022,7 +1022,7 @@ lsdepth mn mx path =
   lsdepthHelper 1 mn mx path
   where
     lsdepthHelper :: Int -> Int -> Int -> FilePath -> Shell FilePath
-    lsdepthHelper depth l u p = 
+    lsdepthHelper depth l u p =
       if depth > u
       then empty
       else do
@@ -1091,8 +1091,8 @@ cp oldPath newPath = liftIO (Filesystem.copyFile oldPath newPath)
 symlink :: MonadIO io => FilePath -> FilePath -> io ()
 symlink a b = liftIO $ createSymbolicLink (fp2fp a) (fp2fp b)
   where
-    fp2fp = unpack . format fp 
-  
+    fp2fp = unpack . format fp
+
 #endif
 
 -- | Copy a directory tree
@@ -1127,8 +1127,8 @@ rmtree path0 = liftIO (sh (loop path0))
   where
     loop path = do
         linkstat <- lstat path
-        let isLink = PosixCompat.isSymbolicLink linkstat
-            isDir = PosixCompat.isDirectory linkstat
+        let isLink = compat_isSymbolicLink linkstat
+            isDir = compat_isDirectory linkstat
         if isLink
             then rm path
             else do
@@ -1673,7 +1673,7 @@ find pattern dir = do
     isNotSymlink :: FilePath -> IO Bool
     isNotSymlink file = do
       file_stat <- lstat file
-      return (not (PosixCompat.isSymbolicLink file_stat))
+      return (not (compat_isSymbolicLink file_stat))
 
 -- | Filter a shell of FilePaths according to a given pattern
 findtree :: Pattern a -> Shell FilePath -> Shell FilePath
@@ -1685,7 +1685,7 @@ findtree pat files = do
 
 {- | Check if a file was last modified after a given
      timestamp
--}     
+-}
 cmin :: MonadIO io => UTCTime -> FilePath -> io Bool
 cmin t file = do
   status <- lstat file
@@ -1695,14 +1695,14 @@ cmin t file = do
 
 {- | Check if a file was last modified before a given
      timestamp
--}     
+-}
 cmax :: MonadIO io => UTCTime -> FilePath -> io Bool
 cmax t file = do
   status <- lstat file
   return (adapt status)
   where
     adapt x = posixSecondsToUTCTime (modificationTime x) < t
-  
+
 -- | A Stream of @\"y\"@s
 yes :: Shell Line
 yes = fmap (\_ -> "y") endless
@@ -1996,28 +1996,28 @@ countLines :: Integral n => Fold Line n
 countLines = genericLength
 
 -- | Get the status of a file
-stat :: MonadIO io => FilePath -> io PosixCompat.FileStatus
-stat = liftIO . PosixCompat.getFileStatus . Filesystem.encodeString
+stat :: MonadIO io => FilePath -> io FileStatus'
+stat = liftIO . compat_getFileStatus . Filesystem.encodeString
 
 -- | Size of the file in bytes. Does not follow symlinks
-fileSize :: PosixCompat.FileStatus -> Size
-fileSize = fromIntegral . PosixCompat.fileSize
+fileSize :: FileStatus' -> Size
+fileSize = fromIntegral . compat_fileSize
 
 -- | Time of last access
-accessTime :: PosixCompat.FileStatus -> POSIXTime
-accessTime = realToFrac . PosixCompat.accessTime
+accessTime :: FileStatus' -> POSIXTime
+accessTime = realToFrac . compat_accessTime
 
 -- | Time of last modification
-modificationTime :: PosixCompat.FileStatus -> POSIXTime
-modificationTime = realToFrac . PosixCompat.modificationTime
+modificationTime :: FileStatus' -> POSIXTime
+modificationTime = realToFrac . compat_modificationTime
 
 -- | Time of last status change (i.e. owner, group, link count, mode, etc.)
-statusChangeTime :: PosixCompat.FileStatus -> POSIXTime
-statusChangeTime = realToFrac . PosixCompat.statusChangeTime
+statusChangeTime :: FileStatus' -> POSIXTime
+statusChangeTime = realToFrac . compat_statusChangeTime
 
 -- | Get the status of a file, but don't follow symbolic links
-lstat :: MonadIO io => FilePath -> io PosixCompat.FileStatus
-lstat = liftIO . PosixCompat.getSymbolicLinkStatus . Filesystem.encodeString
+lstat :: MonadIO io => FilePath -> io FileStatus'
+lstat = liftIO . compat_getSymbolicLinkStatus . Filesystem.encodeString
 
 data WithHeader a
     = Header a
@@ -2139,3 +2139,24 @@ sortOn f = sortBy (comparing f)
 -- [(1,'a'),(2,'c'),(3,'d'),(3,'e'),(4,'b'),(7,'f')]
 sortBy :: (Functor io, MonadIO io) => (a -> a -> Ordering) -> Shell a -> io [a]
 sortBy f s = List.sortBy f <$> fold s list
+
+openDirStream = error "openDirStream not implemented "
+closeDirStream = error "closeDirStream not implemented"
+readDirStream = error "readDirStream not implemented"
+createSymbolicLink = error "createSymbolicLink not implemented"
+compat_isSymbolicLink = error "compat_isSymbolicLink not implemented"
+compat_isDirectory = error "compat_isDirectory is not implemented"
+compat_getFileStatus = error "compat_getFileStatus is not implemented"
+compat_fileSize = error "compat_fileSize is not implemented"
+compat_accessTime = error "compat_accessTime is not implemented"
+compat_modificationTime = error "compat_modificationTime is not implemented"
+compat_statusChangeTime = error "compat_statusChangeTime is not implemented"
+compat_getSymbolicLinkStatus = error "compat_getSymbolicLinkStatus is not implemented"
+compat_isBlockDevice = error "compat_isBlockDevice is not implemented"
+compat_isCharacterDevice = error "compat_isCharacterDevice is not implemented"
+compat_isNamedPipe = error "compat_isNamedPipe is not implemented"
+compat_isRegularFile = error "compat_isRegularFile is not implemented"
+compat_isSocket = error "compat_isSocket is not implemented"
+
+touchFile = error "touchFile not implemented"
+type FileStatus' = ()
diff --git a/src/Turtle/Shell.hs b/src/Turtle/Shell.hs
index d827391..ba37c80 100644
--- a/src/Turtle/Shell.hs
+++ b/src/Turtle/Shell.hs
@@ -37,7 +37,7 @@
     * `liftIO`, to embed an `IO` action within a `Shell`
 
     * `using`, to acquire a `Managed` resource within a `Shell`
-    
+
     Then use these classes to combine those primitive `Shell`s into larger
     `Shell`s:
 
@@ -207,7 +207,7 @@ instance Fail.MonadFail Shell where
     fail = Prelude.fail
 #endif
 
-#if __GLASGOW_HASKELL__ >= 804
+#if MIN_VERSION_base(4,9,0)
 instance Monoid a => Semigroup (Shell a) where
   (<>) = mappend
 #endif
diff --git a/turtle.cabal b/turtle.cabal
index bfc215e..6338495 100644
--- a/turtle.cabal
+++ b/turtle.cabal
@@ -70,12 +70,12 @@ Library
         time                               < 1.9 ,
         transformers         >= 0.2.0.0 && < 0.6 ,
         optparse-applicative >= 0.13    && < 0.15,
-        optional-args        >= 1.0     && < 2.0 ,
-        unix-compat          >= 0.4     && < 0.6
-    if os(windows)
-        Build-Depends: Win32 >= 2.2.0.1 && < 2.6
-    else
-        Build-Depends: unix  >= 2.5.1.0 && < 2.8
+        optional-args        >= 1.0     && < 2.0
+        -- unix-compat          >= 0.4     && < 0.6
+    -- if os(windows)
+    --     Build-Depends: Win32 >= 2.2.0.1 && < 2.6
+    -- else
+    --     Build-Depends: unix  >= 2.5.1.0 && < 2.8
     Exposed-Modules:
         Turtle,
         Turtle.Bytes,
-- 
2.15.2 (Apple Git-101.1)

