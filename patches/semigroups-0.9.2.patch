From dbb4d416c46a874d17b1056deff909d14dfd5246 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Thu, 17 Aug 2017 02:43:40 -0400
Subject: [PATCH] Patched

---
 semigroups.cabal      |  2 +-
 src/Data/Semigroup.hs | 29 ++++++++++++++++++++++++++---
 2 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/semigroups.cabal b/semigroups.cabal
index 8ef77ec..7586c76 100644
--- a/semigroups.cabal
+++ b/semigroups.cabal
@@ -41,7 +41,7 @@ library
     build-depends:
       base       >= 3 && < 5,
       containers >= 0.3 && < 0.6,
-      nats       >= 0.1 && < 0.3
+      nats       >= 0.1
 
   hs-source-dirs: src
   ghc-options:    -Wall
diff --git a/src/Data/Semigroup.hs b/src/Data/Semigroup.hs
index b0d3383..807cf74 100644
--- a/src/Data/Semigroup.hs
+++ b/src/Data/Semigroup.hs
@@ -65,7 +65,11 @@ import Data.Foldable
 import Data.Traversable
 import Data.List.NonEmpty
 
+#if MIN_VERSION_nats(1,0,0)
+import Numeric.Natural
+#else
 import Numeric.Natural.Internal
+#endif
 import Data.Sequence (Seq, (><))
 import Data.Set (Set)
 import Data.IntSet (IntSet)
@@ -110,17 +114,26 @@ class Semigroup a where
   --
   -- See also 'times'.
 
+#if MIN_VERSION_nats(1,0,0)
+  times1p :: Natural -> a -> a
+#else
   times1p :: Whole n => n -> a -> a
+#endif
   times1p y0 x0 = f x0 (1 Prelude.+ y0)
     where
+#if MIN_VERSION_nats(1,0,0)
+      unsafePred' = pred
+#else
+      unsafePred' = unsafePred
+#endif
       f x y
         | even y = f (x <> x) (y `quot` 2)
         | y == 1 = x
-        | otherwise = g (x <> x) (unsafePred y  `quot` 2) x
+        | otherwise = g (x <> x) (unsafePred' y  `quot` 2) x
       g x y z
         | even y = g (x <> x) (y `quot` 2) z
         | y == 1 = x <> z
-        | otherwise = g (x <> x) (unsafePred y `quot` 2) (x <> z)
+        | otherwise = g (x <> x) (unsafePred' y `quot` 2) (x <> z)
   {-# INLINE times1p #-}
 
 -- | A generalization of 'Data.List.cycle' to an arbitrary 'Semigroup'.
@@ -288,9 +301,19 @@ instance Monoid m => Monoid (WrappedMonoid m) where
 -- > times n a = a <> a <> ... <> a  -- using <> (n-1) times
 --
 -- Implemented using 'times1p'.
+#if MIN_VERSION_nats(1,0,0)
+timesN :: (Monoid a) => Natural -> a -> a
+#else
 timesN :: (Whole n, Monoid a) => n -> a -> a
+#endif
 timesN n x | n == 0    = mempty
-           | otherwise = unwrapMonoid . times1p (unsafePred n) . WrapMonoid $ x
+           | otherwise = unwrapMonoid . times1p (unsafePred' n) . WrapMonoid $ x
+  where
+#if MIN_VERSION_nats(1,0,0)
+      unsafePred' = pred
+#else
+      unsafePred' = unsafePred
+#endif
 {-# INLINE timesN #-}
 
 
-- 
2.7.4 (Apple Git-66)

