From aac01ddb61c68682feb15d867f9c1a1881886ba0 Mon Sep 17 00:00:00 2001
From: Alexey Raga <alexey.raga@gmail.com>
Date: Thu, 3 Aug 2017 22:41:06 +1000
Subject: [PATCH 1/2] eta-ready

---
 avro.cabal              | 4 ++--
 src/Data/Avro/Encode.hs | 6 +++---
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/avro.cabal b/avro.cabal
index 4694efe..ad0c11e 100644
--- a/avro.cabal
+++ b/avro.cabal
@@ -49,7 +49,7 @@ library
                        bytestring,
                        containers,
                        data-binary-ieee754,
-                       entropy,
+                       random,
                        fail,
                        hashable,
                        mtl,
@@ -97,7 +97,7 @@ test-suite test
                       , binary
                       , bytestring
                       , containers
-                      , entropy
+                      , random
                       , extra
                       , fail
                       , hashable
diff --git a/src/Data/Avro/Encode.hs b/src/Data/Avro/Encode.hs
index 73b4a25..82e00dd 100644
--- a/src/Data/Avro/Encode.hs
+++ b/src/Data/Avro/Encode.hs
@@ -45,7 +45,7 @@ import qualified Data.Vector             as V
 import qualified Data.Vector.Unboxed     as U
 import           Data.Word
 import           Data.Proxy
-import           System.Entropy (getEntropy)
+import           System.Random (randomIO)

 import Data.Avro.EncodeRaw
 import Data.Avro.Schema as S
@@ -60,8 +60,8 @@ encodeAvro = toLazyByteString . putAvro
 -- the synchronization markers.
 encodeContainer :: EncodeAvro a => [[a]] -> IO BL.ByteString
 encodeContainer xss =
-  do sync <- getEntropy 16
-     return $ encodeContainerWithSync (BL.fromStrict sync) xss
+  do sync <- BL.pack <$> traverse (const randomIO) [0..15]
+     return $ encodeContainerWithSync sync xss

 -- |Encode chunks of objects into a container, using the provided
 -- ByteString as the synchronization markers.
--
2.11.0 (Apple Git-81)


From cb7646c3cdf868faa1f138bdd24fa7c8162c8157 Mon Sep 17 00:00:00 2001
From: Alexey Raga <alexey.raga@gmail.com>
Date: Fri, 4 Aug 2017 00:10:34 +1000
Subject: [PATCH 2/2] patch

---
 avro.cabal                   |  7 ++-----
 test/Avro/Codec/Int64Spec.hs |  2 +-
 test/Avro/EncodeRawSpec.hs   |  2 +-
 test/Avro/THEnumSpec.hs      | 24 ------------------------
 test/Avro/THReusedSpec.hs    | 33 ---------------------------------
 test/Avro/THSimpleSpec.hs    | 42 ------------------------------------------
 6 files changed, 4 insertions(+), 106 deletions(-)
 delete mode 100644 test/Avro/THEnumSpec.hs
 delete mode 100644 test/Avro/THReusedSpec.hs
 delete mode 100644 test/Avro/THSimpleSpec.hs

diff --git a/avro.cabal b/avro.cabal
index ad0c11e..81e634c 100644
--- a/avro.cabal
+++ b/avro.cabal
@@ -27,7 +27,7 @@ flag dev

 flag templateHaskell
   Description: Build Avro.Deriving, which uses Template Haskell.
-  Default: True
+  Default: False

 library
   exposed-modules:      Data.Avro,
@@ -98,11 +98,11 @@ test-suite test
                       , bytestring
                       , containers
                       , random
-                      , extra
                       , fail
                       , hashable
                       , mtl
                       , scientific
+                      , split
                       , text
                       , unordered-containers
                       , vector
@@ -115,9 +115,6 @@ test-suite test
   if flag(templateHaskell)
     build-depends: template-haskell
     other-extensions: TemplateHaskell
-    other-modules:    Avro.THEnumSpec
-                    , Avro.THReusedSpec
-                    , Avro.THSimpleSpec

   main-is:              Spec.hs
   ghc-options:          -threaded
diff --git a/test/Avro/Codec/Int64Spec.hs b/test/Avro/Codec/Int64Spec.hs
index 0d56ec1..65c410a 100644
--- a/test/Avro/Codec/Int64Spec.hs
+++ b/test/Avro/Codec/Int64Spec.hs
@@ -10,8 +10,8 @@ import           Data.Avro.Schema
 import           Data.Avro.Zig
 import           Data.Bits
 import           Data.ByteString.Builder
+import           Data.List.Split
 import           Data.Int
-import           Data.List.Extra
 import           Data.Tagged
 import           Data.Word
 import           Numeric (showHex)
diff --git a/test/Avro/EncodeRawSpec.hs b/test/Avro/EncodeRawSpec.hs
index 9d880d0..05bd558 100644
--- a/test/Avro/EncodeRawSpec.hs
+++ b/test/Avro/EncodeRawSpec.hs
@@ -3,7 +3,7 @@ module Avro.EncodeRawSpec (spec) where
 import           Data.Avro.EncodeRaw
 import           Data.Bits
 import           Data.ByteString.Builder
-import           Data.List.Extra
+import           Data.List.Split
 import           Data.Word
 import           Test.Hspec
 import qualified Data.ByteString.Lazy as BL
diff --git a/test/Avro/THEnumSpec.hs b/test/Avro/THEnumSpec.hs
deleted file mode 100644
index 3a91aa3..0000000
--- a/test/Avro/THEnumSpec.hs
+++ /dev/null
@@ -1,24 +0,0 @@
-{-# LANGUAGE OverloadedStrings   #-}
-{-# LANGUAGE ScopedTypeVariables #-}
-{-# LANGUAGE TemplateHaskell     #-}
-module Avro.THEnumSpec
-where
-
-import           Data.Avro
-import           Data.Avro.Deriving
-
-import Test.Hspec
-
-{-# ANN module ("HLint: ignore Redundant do"        :: String) #-}
-
-deriveAvro "test/data/enums.avsc"
-
-spec :: Spec
-spec = describe "Avro.THEnumSpec: Schema with enums" $ do
-  it "should do roundtrip" $ do
-    let msg = EnumWrapper
-              { enumWrapperId   = 42
-              , enumWrapperName = "Text"
-              , enumWrapperReason = EnumReasonBecause
-              }
-    fromAvro (toAvro msg) `shouldBe` pure msg
\ No newline at end of file
diff --git a/test/Avro/THReusedSpec.hs b/test/Avro/THReusedSpec.hs
deleted file mode 100644
index ecbef7d..0000000
--- a/test/Avro/THReusedSpec.hs
+++ /dev/null
@@ -1,33 +0,0 @@
-{-# LANGUAGE OverloadedStrings   #-}
-{-# LANGUAGE ScopedTypeVariables #-}
-{-# LANGUAGE TemplateHaskell     #-}
-module Avro.THReusedSpec
-where
-
-import           Data.Avro
-import           Data.Avro.Deriving
-
-import Test.Hspec
-
-{-# ANN module ("HLint: ignore Redundant do"        :: String) #-}
-
-deriveAvro "test/data/reused.avsc"
-
-spec :: Spec
-spec = describe "Avro.THReusedSpec: Schema with named types" $ do
-  let container = ContainerChild
-                  { containerChildFstIncluded = ReusedChild 100
-                  , containerChildSndIncluded = ReusedChild 200
-                  }
-  let wrapper = ReusedWrapper
-                { reusedWrapperFull  = ReusedChild 42
-                , reusedWrapperInner = container
-                }
-  it "wrapper should do roundtrip" $
-    fromAvro (toAvro wrapper)         `shouldBe` pure wrapper
-
-  it "child should do rundtrip" $
-    fromAvro (toAvro container)       `shouldBe` pure container
-
-  it "innermost element should do roundtrip" $
-    fromAvro (toAvro (ReusedChild 7)) `shouldBe` pure (ReusedChild 7)
\ No newline at end of file
diff --git a/test/Avro/THSimpleSpec.hs b/test/Avro/THSimpleSpec.hs
deleted file mode 100644
index c5644f8..0000000
--- a/test/Avro/THSimpleSpec.hs
+++ /dev/null
@@ -1,42 +0,0 @@
-{-# LANGUAGE OverloadedStrings   #-}
-{-# LANGUAGE ScopedTypeVariables #-}
-{-# LANGUAGE TemplateHaskell     #-}
-module Avro.THSimpleSpec
-where
-
-import           Control.Monad
-import           Data.Aeson (decodeStrict)
-import           Data.Avro
-import           Data.Avro.Deriving
-import           Data.Avro.Schema
-import           Data.ByteString as BS
-
-import Test.Hspec
-
-{-# ANN module ("HLint: ignore Redundant do"        :: String) #-}
-
-deriveAvro "test/data/small.avsc"
-
-spec :: Spec
-spec = describe "Avro.THSpec: Small Schema" $ do
-  let msgs =
-        [ Endpoint
-          { endpointIps   = ["192.168.1.1", "127.0.0.1"]
-          , endpointPorts = [PortRange 1 10, PortRange 11 20]
-          }
-        , Endpoint
-          { endpointIps   = []
-          , endpointPorts = [PortRange 1 10, PortRange 11 20]
-          }
-        ]
-
-  it "should do roundtrip" $ do
-    forM_ msgs $ \msg ->
-      fromAvro (toAvro msg) `shouldBe` pure msg
-
-  it "should do full round trip" $
-    forM_ msgs $ \msg -> do
-      let encoded = encode msg
-      let decoded = decode (schemaOf msg) encoded
-
-      pure msg `shouldBe` decoded
--
2.11.0 (Apple Git-81)

