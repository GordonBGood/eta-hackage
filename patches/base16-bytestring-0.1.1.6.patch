From 27edd87bd517ce54a88679c8faccdbf847dfb412 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Wed, 3 Jan 2018 12:29:42 +0530
Subject: [PATCH] Patched

---
 Data/ByteString/Base16.hs | 27 +++++++++++++++++++++++++--
 base16-bytestring.cabal   |  5 +++++
 java/Utils.java           | 22 ++++++++++++++++++++++
 3 files changed, 52 insertions(+), 2 deletions(-)
 create mode 100644 java/Utils.java

diff --git a/Data/ByteString/Base16.hs b/Data/ByteString/Base16.hs
index bdcd935..febebb9 100644
--- a/Data/ByteString/Base16.hs
+++ b/Data/ByteString/Base16.hs
@@ -1,4 +1,7 @@
-{-# LANGUAGE BangPatterns, MagicHash #-}
+{-# LANGUAGE BangPatterns, MagicHash, CPP #-}
+#ifndef PRIM_STRING
+{-# LANGUAGE ForeignFunctionInterface #-}
+#endif
 
 -- |
 -- Module      : Data.ByteString.Base16
@@ -25,6 +28,9 @@ import Foreign.Ptr (Ptr, minusPtr, plusPtr)
 import Foreign.Storable (peek, poke)
 import System.IO.Unsafe (unsafePerformIO)
 import GHC.Prim
+#ifndef PRIM_STRING
+import GHC.CString
+#endif
 import GHC.Types
 import GHC.Word
 
@@ -50,9 +56,15 @@ encode (PS sfp soff slen)
       poke d (tlookup tableHi x)
       poke (d `plusPtr` 1) (tlookup tableLo x)
       go (s `plusPtr` 1) (d `plusPtr` 2)
+#ifdef PRIM_STRING
     tlookup :: Addr# -> Int -> Word8
     tlookup table (I# index) = W8# (indexWord8OffAddr# table index)
     !tableLo =
+#else
+    tlookup :: JByteArray# -> Int -> Word8
+    tlookup table (I# index) = W8# (int2Word# (ord# (indexStrChar# table index)))
+    !tableLo = getBytesUtf8#
+#endif
       "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66\
       \\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66\
       \\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66\
@@ -69,7 +81,11 @@ encode (PS sfp soff slen)
       \\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66\
       \\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66\
       \\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66"#
+#ifdef PRIM_STRING
     !tableHi =
+#else
+    !tableHi = getBytesUtf8#
+#endif
       "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\
       \\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\
       \\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\
@@ -115,7 +131,7 @@ decode (PS sfp soff slen) =
         else do
           poke d . fromIntegral $ lo + (hi `shiftL` 4)
           go (s `plusPtr` 2) (d `plusPtr` 1)
-
+#ifdef PRIM_STRING
     hex (I# index) = W8# (indexWord8OffAddr# table index)
     !table =
         "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
@@ -134,6 +150,13 @@ decode (PS sfp soff slen) =
         \\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
         \\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
         \\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#
+#else
+    hex (I# index) = W8# (int2Word# (ord# (indexStrChar# table index)))
+    !(JByteArray table) = hexTable
+
+foreign import java unsafe "@static @field eta.base16bytestring.Utils.hexTable"
+  hexTable :: JByteArray
+#endif
 
 peek8 :: Ptr Word8 -> IO Int
 peek8 p = fromIntegral `fmap` peek p
diff --git a/base16-bytestring.cabal b/base16-bytestring.cabal
index 364b4a1..b9630ae 100644
--- a/base16-bytestring.cabal
+++ b/base16-bytestring.cabal
@@ -26,6 +26,11 @@ library
     bytestring >= 0.9,
     ghc-prim
 
+  if impl(eta >= 0.0.9.7)
+    cpp-options: -DPRIM_STRING
+  else
+    java-sources: java/Utils.java
+
   ghc-options: -Wall -funbox-strict-fields
   ghc-prof-options: -auto-all
 
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..9420da7
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,22 @@
+package eta.base16bytestring;
+
+public class Utils {
+    public static final byte[] hexTable = new byte[] {
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,
+        (byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff
+    };
+}
-- 
2.7.4 (Apple Git-66)

