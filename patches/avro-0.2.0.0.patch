From 78a162cd382fb8ab0b443eae59b688e155d12e00 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Mon, 2 Oct 2017 15:35:51 -0400
Subject: [PATCH] Patched

---
 avro.cabal                   | 11 ++++-------
 src/Data/Avro/Encode.hs      |  6 +++---
 test/Avro/Codec/Int64Spec.hs |  2 +-
 test/Avro/EncodeRawSpec.hs   |  2 +-
 test/Avro/THEnumSpec.hs      | 24 ------------------------
 test/Avro/THReusedSpec.hs    | 33 ---------------------------------
 test/Avro/THSimpleSpec.hs    | 42 ------------------------------------------
 7 files changed, 9 insertions(+), 111 deletions(-)
 delete mode 100644 test/Avro/THEnumSpec.hs
 delete mode 100644 test/Avro/THReusedSpec.hs
 delete mode 100644 test/Avro/THSimpleSpec.hs

diff --git a/avro.cabal b/avro.cabal
index eb60b14..f4c4941 100644
--- a/avro.cabal
+++ b/avro.cabal
@@ -27,7 +27,7 @@ flag dev
 
 flag templateHaskell
   Description: Build Avro.Deriving, which uses Template Haskell.
-  Default: True
+  Default: False
 
 library
   exposed-modules:      Data.Avro,
@@ -52,7 +52,7 @@ library
                        bytestring,
                        containers,
                        data-binary-ieee754,
-                       entropy,
+                       random,
                        fail,
                        hashable,
                        mtl,
@@ -100,12 +100,12 @@ test-suite test
                       , binary
                       , bytestring
                       , containers
-                      , entropy
-                      , extra
+                      , random
                       , fail
                       , hashable
                       , mtl
                       , scientific
+                      , split
                       , text
                       , unordered-containers
                       , vector
@@ -118,9 +118,6 @@ test-suite test
   if flag(templateHaskell)
     build-depends: template-haskell
     other-extensions: TemplateHaskell
-    other-modules:    Avro.THEnumSpec
-                    , Avro.THReusedSpec
-                    , Avro.THSimpleSpec
 
   main-is:              Spec.hs
   ghc-options:          -threaded
diff --git a/src/Data/Avro/Encode.hs b/src/Data/Avro/Encode.hs
index 73b4a25..82e00dd 100644
--- a/src/Data/Avro/Encode.hs
+++ b/src/Data/Avro/Encode.hs
@@ -45,7 +45,7 @@ import qualified Data.Vector             as V
 import qualified Data.Vector.Unboxed     as U
 import           Data.Word
 import           Data.Proxy
-import           System.Entropy (getEntropy)
+import           System.Random (randomIO)
 
 import Data.Avro.EncodeRaw
 import Data.Avro.Schema as S
@@ -60,8 +60,8 @@ encodeAvro = toLazyByteString . putAvro
 -- the synchronization markers.
 encodeContainer :: EncodeAvro a => [[a]] -> IO BL.ByteString
 encodeContainer xss =
-  do sync <- getEntropy 16
-     return $ encodeContainerWithSync (BL.fromStrict sync) xss
+  do sync <- BL.pack <$> traverse (const randomIO) [0..15]
+     return $ encodeContainerWithSync sync xss
 
 -- |Encode chunks of objects into a container, using the provided
 -- ByteString as the synchronization markers.
diff --git a/test/Avro/Codec/Int64Spec.hs b/test/Avro/Codec/Int64Spec.hs
index 4cca321..62becfb 100644
--- a/test/Avro/Codec/Int64Spec.hs
+++ b/test/Avro/Codec/Int64Spec.hs
@@ -10,8 +10,8 @@ import           Data.Avro.Schema
 import           Data.Avro.Zig
 import           Data.Bits
 import           Data.ByteString.Builder
+import           Data.List.Split
 import           Data.Int
-import           Data.List.Extra
 import           Data.Tagged
 import           Data.Word
 import           Numeric (showHex)
diff --git a/test/Avro/EncodeRawSpec.hs b/test/Avro/EncodeRawSpec.hs
index 9d880d0..05bd558 100644
--- a/test/Avro/EncodeRawSpec.hs
+++ b/test/Avro/EncodeRawSpec.hs
@@ -3,7 +3,7 @@ module Avro.EncodeRawSpec (spec) where
 import           Data.Avro.EncodeRaw
 import           Data.Bits
 import           Data.ByteString.Builder
-import           Data.List.Extra
+import           Data.List.Split
 import           Data.Word
 import           Test.Hspec
 import qualified Data.ByteString.Lazy as BL
diff --git a/test/Avro/THEnumSpec.hs b/test/Avro/THEnumSpec.hs
deleted file mode 100644
index 3a91aa3..0000000
--- a/test/Avro/THEnumSpec.hs
+++ /dev/null
@@ -1,24 +0,0 @@
-{-# LANGUAGE OverloadedStrings   #-}
-{-# LANGUAGE ScopedTypeVariables #-}
-{-# LANGUAGE TemplateHaskell     #-}
-module Avro.THEnumSpec
-where
-
-import           Data.Avro
-import           Data.Avro.Deriving
-
-import Test.Hspec
-
-{-# ANN module ("HLint: ignore Redundant do"        :: String) #-}
-
-deriveAvro "test/data/enums.avsc"
-
-spec :: Spec
-spec = describe "Avro.THEnumSpec: Schema with enums" $ do
-  it "should do roundtrip" $ do
-    let msg = EnumWrapper
-              { enumWrapperId   = 42
-              , enumWrapperName = "Text"
-              , enumWrapperReason = EnumReasonBecause
-              }
-    fromAvro (toAvro msg) `shouldBe` pure msg
\ No newline at end of file
diff --git a/test/Avro/THReusedSpec.hs b/test/Avro/THReusedSpec.hs
deleted file mode 100644
index ecbef7d..0000000
--- a/test/Avro/THReusedSpec.hs
+++ /dev/null
@@ -1,33 +0,0 @@
-{-# LANGUAGE OverloadedStrings   #-}
-{-# LANGUAGE ScopedTypeVariables #-}
-{-# LANGUAGE TemplateHaskell     #-}
-module Avro.THReusedSpec
-where
-
-import           Data.Avro
-import           Data.Avro.Deriving
-
-import Test.Hspec
-
-{-# ANN module ("HLint: ignore Redundant do"        :: String) #-}
-
-deriveAvro "test/data/reused.avsc"
-
-spec :: Spec
-spec = describe "Avro.THReusedSpec: Schema with named types" $ do
-  let container = ContainerChild
-                  { containerChildFstIncluded = ReusedChild 100
-                  , containerChildSndIncluded = ReusedChild 200
-                  }
-  let wrapper = ReusedWrapper
-                { reusedWrapperFull  = ReusedChild 42
-                , reusedWrapperInner = container
-                }
-  it "wrapper should do roundtrip" $
-    fromAvro (toAvro wrapper)         `shouldBe` pure wrapper
-
-  it "child should do rundtrip" $
-    fromAvro (toAvro container)       `shouldBe` pure container
-
-  it "innermost element should do roundtrip" $
-    fromAvro (toAvro (ReusedChild 7)) `shouldBe` pure (ReusedChild 7)
\ No newline at end of file
diff --git a/test/Avro/THSimpleSpec.hs b/test/Avro/THSimpleSpec.hs
deleted file mode 100644
index e718a60..0000000
--- a/test/Avro/THSimpleSpec.hs
+++ /dev/null
@@ -1,42 +0,0 @@
-{-# LANGUAGE OverloadedStrings   #-}
-{-# LANGUAGE ScopedTypeVariables #-}
-{-# LANGUAGE TemplateHaskell     #-}
-module Avro.THSimpleSpec
-where
-
-import           Control.Monad
-import           Data.Aeson (decodeStrict)
-import           Data.Avro
-import           Data.Avro.Deriving
-import           Data.Avro.Schema
-import           Data.ByteString as BS
-
-import Test.Hspec
-
-{-# ANN module ("HLint: ignore Redundant do"        :: String) #-}
-
-deriveAvro "test/data/small.avsc"
-
-spec :: Spec
-spec = describe "Avro.THSpec: Small Schema" $ do
-  let msgs =
-        [ Endpoint
-          { endpointIps   = ["192.168.1.1", "127.0.0.1"]
-          , endpointPorts = [PortRange 1 10, PortRange 11 20]
-          }
-        , Endpoint
-          { endpointIps   = []
-          , endpointPorts = [PortRange 1 10, PortRange 11 20]
-          }
-        ]
-
-  it "should do roundtrip" $ do
-    forM_ msgs $ \msg ->
-      fromAvro (toAvro msg) `shouldBe` pure msg
-
-  it "should do full round trip" $
-    forM_ msgs $ \msg -> do
-      let encoded = encode msg
-      let decoded = decode encoded
-
-      pure msg `shouldBe` decoded
-- 
2.7.4 (Apple Git-66)

