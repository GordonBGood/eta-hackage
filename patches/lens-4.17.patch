From 8207c62efb1bbc4eccb9f1aee8ac605a842f1957 Mon Sep 17 00:00:00 2001
From: Jyothsna Srinivas <jyothsnasrinivas17@gmail.com>
Date: Tue, 17 Jul 2018 21:32:07 +0530
Subject: [PATCH] Patched

---
 lens.cabal                    |  16 +--
 src/Control/Exception/Lens.hs |   5 +-
 src/Control/Lens/Empty.hs     |   4 +-
 src/Control/Lens/Wrapped.hs   | 320 +++++++++++++++++++++---------------------
 src/GHC/Generics/Lens.hs      |   2 +-
 src/Numeric/Lens.hs           |   6 +-
 6 files changed, 175 insertions(+), 178 deletions(-)

diff --git a/lens.cabal b/lens.cabal
index d0fcbd8..251a209 100644
--- a/lens.cabal
+++ b/lens.cabal
@@ -10,7 +10,7 @@ stability:     provisional
 homepage:      http://github.com/ekmett/lens/
 bug-reports:   http://github.com/ekmett/lens/issues
 copyright:     Copyright (C) 2012-2016 Edward A. Kmett
-build-type:    Custom
+build-type:    Simple
 -- build-tools:   cpphs
 tested-with:   GHC == 7.4.2
              , GHC == 7.6.3
@@ -120,12 +120,12 @@ source-repository head
   type: git
   location: https://github.com/ekmett/lens.git
 
-custom-setup
-  setup-depends:
-    Cabal >= 1.10 && <2.5,
-    base  >= 4.5 && <5,
-    cabal-doctest >= 1 && <1.1,
-    filepath
+-- custom-setup
+--   setup-depends:
+--     Cabal >= 1.10 && <2.5,
+--     base  >= 4.5 && <5,
+--     cabal-doctest >= 1 && <1.1,
+--     filepath
 
 -- Enable benchmarking against Neil Mitchell's uniplate library for comparative performance analysis. Defaults to being turned off to avoid
 -- the extra dependency.
@@ -316,7 +316,7 @@ library
   other-modules:
     Paths_lens
 
-  cpp-options: -traditional
+  -- cpp-options: -traditional
 
   if flag(safe)
     cpp-options: -DSAFE=1
diff --git a/src/Control/Exception/Lens.hs b/src/Control/Exception/Lens.hs
index 259156e..3a0f0e4 100644
--- a/src/Control/Exception/Lens.hs
+++ b/src/Control/Exception/Lens.hs
@@ -172,7 +172,7 @@ module Control.Exception.Lens
   , AsTypeError(..)
   , pattern TypeError_
 #endif
-#if MIN_VERSION_base(4,10,0)
+#if MIN_VERSION_base(4,10,0) && !defined(ETA_VERSION)
   -- ** Compaction Failed
   , AsCompactionFailed(..)
   , pattern CompactionFailed_
@@ -1208,7 +1208,7 @@ pattern TypeError_ e <- (preview _TypeError -> Just e) where
   TypeError_ e = review _TypeError e
 #endif
 
-#if MIN_VERSION_base(4,10,0)
+#if MIN_VERSION_base(4,10,0) && !defined(ETA_VERSION)
 ----------------------------------------------------------------------------
 -- CompactionFailed
 ----------------------------------------------------------------------------
@@ -1270,4 +1270,3 @@ pattern HandlingException_ <- (has _HandlingException -> True) where
 
 trivial :: t -> Iso' t ()
 trivial t = const () `iso` const t
-
diff --git a/src/Control/Lens/Empty.hs b/src/Control/Lens/Empty.hs
index 466f1be..19c1f00 100644
--- a/src/Control/Lens/Empty.hs
+++ b/src/Control/Lens/Empty.hs
@@ -54,7 +54,7 @@ import Data.Vector as Vector
 import Data.Vector.Unboxed as Unboxed
 import Data.Vector.Storable as Storable
 
-#if !defined(mingw32_HOST_OS) && !defined(ghcjs_HOST_OS)
+#if !defined(mingw32_HOST_OS) && !defined(ghcjs_HOST_OS) && !defined(ETA_VERSION)
 import GHC.Event
 #endif
 
@@ -78,7 +78,7 @@ instance AsEmpty Ordering
 instance AsEmpty ()
 instance AsEmpty Any
 instance AsEmpty All
-#if !defined(mingw32_HOST_OS) && !defined(ghcjs_HOST_OS)
+#if !defined(mingw32_HOST_OS) && !defined(ghcjs_HOST_OS) && !defined(ETA_VERSION)
 instance AsEmpty Event
 #endif
 instance (Eq a, Num a) => AsEmpty (Product a)
diff --git a/src/Control/Lens/Wrapped.hs b/src/Control/Lens/Wrapped.hs
index 9ea5071..d0d5fd1 100644
--- a/src/Control/Lens/Wrapped.hs
+++ b/src/Control/Lens/Wrapped.hs
@@ -82,8 +82,6 @@ module Control.Lens.Wrapped
   , _GWrapped'
   ) where
 
-#include "HsBaseConfig.h"
-
 import qualified Control.Alternative.Free as Free
 import qualified Control.Applicative as Applicative
 import           Control.Applicative hiding (WrappedArrow(..))
@@ -95,7 +93,7 @@ import           Control.Comonad.Trans.Coiter
 import           Control.Comonad.Trans.Traced
 import           Control.Exception
 import           Control.Lens.Getter
-import           Control.Lens.Internal.CTypes
+-- import           Control.Lens.Internal.CTypes
 import           Control.Lens.Iso
 #if __GLASGOW_HASKELL__ >= 710
 import           Control.Lens.Review
@@ -158,7 +156,7 @@ import           Foreign.C.Error
 import           Foreign.C.Types
 import qualified GHC.Generics as Generic
 import           GHC.Generics hiding (from, to)
-import           System.Posix.Types
+-- import           System.Posix.Types
 
 #if MIN_VERSION_base(4,6,0)
 import           Data.Ord (Down(Down))
@@ -863,7 +861,7 @@ getTypeError (TypeError x) = x
 {-# INLINE getTypeError #-}
 #endif
 
-#if MIN_VERSION_base(4,10,0)
+#if MIN_VERSION_base(4,10,0) && !defined(ETA_VERSION)
 instance (t ~ CompactionFailed) => Rewrapped CompactionFailed t
 instance Wrapped CompactionFailed where
   type Unwrapped CompactionFailed = String
@@ -876,7 +874,7 @@ getCompactionFailed (CompactionFailed x) = x
 #endif
 
 getErrorCall :: ErrorCall -> String
-#if __GLASGOW_HASKELL__ < 800
+#if !MIN_VERSION_base(4,10,0)
 getErrorCall (ErrorCall x) = x
 #else
 getErrorCall (ErrorCallWithLocation x _) = x
@@ -909,155 +907,155 @@ failedAssertion (AssertionFailed x) = x
 
 -- * Foreign.C.Types
 
-instance Rewrapped CChar t
-instance Wrapped CChar where
-  type Unwrapped CChar = HTYPE_CHAR
-  _Wrapped' = iso (\(CChar x) -> x) CChar
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CSChar t
-instance Wrapped CSChar where
-  type Unwrapped CSChar = HTYPE_SIGNED_CHAR
-  _Wrapped' = iso (\(CSChar x) -> x) CSChar
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CUChar t
-instance Wrapped CUChar where
-  type Unwrapped CUChar = HTYPE_UNSIGNED_CHAR
-  _Wrapped' = iso (\(CUChar x) -> x) CUChar
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CShort t
-instance Wrapped CShort where
-  type Unwrapped CShort = HTYPE_SHORT
-  _Wrapped' = iso (\(CShort x) -> x) CShort
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CUShort t
-instance Wrapped CUShort where
-  type Unwrapped CUShort = HTYPE_UNSIGNED_SHORT
-  _Wrapped' = iso (\(CUShort x) -> x) CUShort
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CInt t
-instance Wrapped CInt where
-  type Unwrapped CInt = HTYPE_INT
-  _Wrapped' = iso (\(CInt x) -> x) CInt
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CUInt t
-instance Wrapped CUInt where
-  type Unwrapped CUInt = HTYPE_UNSIGNED_INT
-  _Wrapped' = iso (\(CUInt x) -> x) CUInt
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CLong t
-instance Wrapped CLong where
-  type Unwrapped CLong = HTYPE_LONG
-  _Wrapped' = iso (\(CLong x) -> x) CLong
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CULong t
-instance Wrapped CULong where
-  type Unwrapped CULong = HTYPE_UNSIGNED_LONG
-  _Wrapped' = iso (\(CULong x) -> x) CULong
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CLLong t
-instance Wrapped CLLong where
-  type Unwrapped CLLong = HTYPE_LONG_LONG
-  _Wrapped' = iso (\(CLLong x) -> x) CLLong
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CULLong t
-instance Wrapped CULLong where
-  type Unwrapped CULLong = HTYPE_UNSIGNED_LONG_LONG
-  _Wrapped' = iso (\(CULLong x) -> x) CULLong
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CFloat t
-instance Wrapped CFloat where
-  type Unwrapped CFloat = HTYPE_FLOAT
-  _Wrapped' = iso (\(CFloat x) -> x) CFloat
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CDouble t
-instance Wrapped CDouble where
-  type Unwrapped CDouble = HTYPE_DOUBLE
-  _Wrapped' = iso (\(CDouble x) -> x) CDouble
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CPtrdiff t
-instance Wrapped CPtrdiff where
-  type Unwrapped CPtrdiff = HTYPE_PTRDIFF_T
-  _Wrapped' = iso (\(CPtrdiff x) -> x) CPtrdiff
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CSize t
-instance Wrapped CSize where
-  type Unwrapped CSize = HTYPE_SIZE_T
-  _Wrapped' = iso (\(CSize x) -> x) CSize
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CWchar t
-instance Wrapped CWchar where
-  type Unwrapped CWchar = HTYPE_WCHAR_T
-  _Wrapped' = iso (\(CWchar x) -> x) CWchar
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CSigAtomic t
-instance Wrapped CSigAtomic where
-  type Unwrapped CSigAtomic = HTYPE_SIG_ATOMIC_T
-  _Wrapped' = iso (\(CSigAtomic x) -> x) CSigAtomic
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CClock t
-instance Wrapped CClock where
-  type Unwrapped CClock = HTYPE_CLOCK_T
-  _Wrapped' = iso (\(CClock x) -> x) CClock
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CTime t
-instance Wrapped CTime where
-  type Unwrapped CTime = HTYPE_TIME_T
-  _Wrapped' = iso (\(CTime x) -> x) CTime
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CUSeconds t
-instance Wrapped CUSeconds where
-  type Unwrapped CUSeconds = HTYPE_USECONDS_T
-  _Wrapped' = iso (\(CUSeconds x) -> x) CUSeconds
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CSUSeconds t
-instance Wrapped CSUSeconds where
-  type Unwrapped CSUSeconds = HTYPE_SUSECONDS_T
-  _Wrapped' = iso (\(CSUSeconds x) -> x) CSUSeconds
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CIntPtr t
-instance Wrapped CIntPtr where
-  type Unwrapped CIntPtr = HTYPE_INTPTR_T
-  _Wrapped' = iso (\(CIntPtr x) -> x) CIntPtr
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CUIntPtr t
-instance Wrapped CUIntPtr where
-  type Unwrapped CUIntPtr = HTYPE_UINTPTR_T
-  _Wrapped' = iso (\(CUIntPtr x) -> x) CUIntPtr
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CIntMax t
-instance Wrapped CIntMax where
-  type Unwrapped CIntMax = HTYPE_INTMAX_T
-  _Wrapped' = iso (\(CIntMax x) -> x) CIntMax
-  {-# INLINE _Wrapped' #-}
-
-instance Rewrapped CUIntMax t
-instance Wrapped CUIntMax where
-  type Unwrapped CUIntMax = HTYPE_UINTMAX_T
-  _Wrapped' = iso (\(CUIntMax x) -> x) CUIntMax
-  {-# INLINE _Wrapped' #-}
+-- instance Rewrapped CChar t
+-- instance Wrapped CChar where
+--   type Unwrapped CChar = HTYPE_CHAR
+--   _Wrapped' = iso (\(CChar x) -> x) CChar
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CSChar t
+-- instance Wrapped CSChar where
+--   type Unwrapped CSChar = HTYPE_SIGNED_CHAR
+--   _Wrapped' = iso (\(CSChar x) -> x) CSChar
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CUChar t
+-- instance Wrapped CUChar where
+--   type Unwrapped CUChar = HTYPE_UNSIGNED_CHAR
+--   _Wrapped' = iso (\(CUChar x) -> x) CUChar
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CShort t
+-- instance Wrapped CShort where
+--   type Unwrapped CShort = HTYPE_SHORT
+--   _Wrapped' = iso (\(CShort x) -> x) CShort
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CUShort t
+-- instance Wrapped CUShort where
+--   type Unwrapped CUShort = HTYPE_UNSIGNED_SHORT
+--   _Wrapped' = iso (\(CUShort x) -> x) CUShort
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CInt t
+-- instance Wrapped CInt where
+--   type Unwrapped CInt = HTYPE_INT
+--   _Wrapped' = iso (\(CInt x) -> x) CInt
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CUInt t
+-- instance Wrapped CUInt where
+--   type Unwrapped CUInt = HTYPE_UNSIGNED_INT
+--   _Wrapped' = iso (\(CUInt x) -> x) CUInt
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CLong t
+-- instance Wrapped CLong where
+--   type Unwrapped CLong = HTYPE_LONG
+--   _Wrapped' = iso (\(CLong x) -> x) CLong
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CULong t
+-- instance Wrapped CULong where
+--   type Unwrapped CULong = HTYPE_UNSIGNED_LONG
+--   _Wrapped' = iso (\(CULong x) -> x) CULong
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CLLong t
+-- instance Wrapped CLLong where
+--   type Unwrapped CLLong = HTYPE_LONG_LONG
+--   _Wrapped' = iso (\(CLLong x) -> x) CLLong
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CULLong t
+-- instance Wrapped CULLong where
+--   type Unwrapped CULLong = HTYPE_UNSIGNED_LONG_LONG
+--   _Wrapped' = iso (\(CULLong x) -> x) CULLong
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CFloat t
+-- instance Wrapped CFloat where
+--   type Unwrapped CFloat = HTYPE_FLOAT
+--   _Wrapped' = iso (\(CFloat x) -> x) CFloat
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CDouble t
+-- instance Wrapped CDouble where
+--   type Unwrapped CDouble = HTYPE_DOUBLE
+--   _Wrapped' = iso (\(CDouble x) -> x) CDouble
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CPtrdiff t
+-- instance Wrapped CPtrdiff where
+--   type Unwrapped CPtrdiff = HTYPE_PTRDIFF_T
+--   _Wrapped' = iso (\(CPtrdiff x) -> x) CPtrdiff
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CSize t
+-- instance Wrapped CSize where
+--   type Unwrapped CSize = HTYPE_SIZE_T
+--   _Wrapped' = iso (\(CSize x) -> x) CSize
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CWchar t
+-- instance Wrapped CWchar where
+--   type Unwrapped CWchar = HTYPE_WCHAR_T
+--   _Wrapped' = iso (\(CWchar x) -> x) CWchar
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CSigAtomic t
+-- instance Wrapped CSigAtomic where
+--   type Unwrapped CSigAtomic = HTYPE_SIG_ATOMIC_T
+--   _Wrapped' = iso (\(CSigAtomic x) -> x) CSigAtomic
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CClock t
+-- instance Wrapped CClock where
+--   type Unwrapped CClock = HTYPE_CLOCK_T
+--   _Wrapped' = iso (\(CClock x) -> x) CClock
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CTime t
+-- instance Wrapped CTime where
+--   type Unwrapped CTime = HTYPE_TIME_T
+--   _Wrapped' = iso (\(CTime x) -> x) CTime
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CUSeconds t
+-- instance Wrapped CUSeconds where
+--   type Unwrapped CUSeconds = HTYPE_USECONDS_T
+--   _Wrapped' = iso (\(CUSeconds x) -> x) CUSeconds
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CSUSeconds t
+-- instance Wrapped CSUSeconds where
+--   type Unwrapped CSUSeconds = HTYPE_SUSECONDS_T
+--   _Wrapped' = iso (\(CSUSeconds x) -> x) CSUSeconds
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CIntPtr t
+-- instance Wrapped CIntPtr where
+--   type Unwrapped CIntPtr = HTYPE_INTPTR_T
+--   _Wrapped' = iso (\(CIntPtr x) -> x) CIntPtr
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CUIntPtr t
+-- instance Wrapped CUIntPtr where
+--   type Unwrapped CUIntPtr = HTYPE_UINTPTR_T
+--   _Wrapped' = iso (\(CUIntPtr x) -> x) CUIntPtr
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CIntMax t
+-- instance Wrapped CIntMax where
+--   type Unwrapped CIntMax = HTYPE_INTMAX_T
+--   _Wrapped' = iso (\(CIntMax x) -> x) CIntMax
+--   {-# INLINE _Wrapped' #-}
+
+-- instance Rewrapped CUIntMax t
+-- instance Wrapped CUIntMax where
+--   type Unwrapped CUIntMax = HTYPE_UINTMAX_T
+--   _Wrapped' = iso (\(CUIntMax x) -> x) CUIntMax
+--   {-# INLINE _Wrapped' #-}
 
 -- * GHC.Generics
 
@@ -1197,13 +1195,13 @@ instance Wrapped CRLim where
   {-# INLINE _Wrapped' #-}
 #endif
 
-instance Rewrapped Fd t
-instance Wrapped Fd where
-  type Unwrapped Fd = CInt
-  _Wrapped' = iso (\(Fd x) -> x) Fd
-  {-# INLINE _Wrapped' #-}
+-- instance Rewrapped Fd t
+-- instance Wrapped Fd where
+--   type Unwrapped Fd = Int
+--   _Wrapped' = iso (\(Fd x) -> x) Fd
+--   {-# INLINE _Wrapped' #-}
 
-#if MIN_VERSION_base(4,10,0)
+#if MIN_VERSION_base(4,10,0) && !defined(ETA_VERSION)
 instance Rewrapped CBool t
 instance Wrapped CBool where
   type Unwrapped CBool = HTYPE_BOOL
diff --git a/src/GHC/Generics/Lens.hs b/src/GHC/Generics/Lens.hs
index d56be69..02e725e 100644
--- a/src/GHC/Generics/Lens.hs
+++ b/src/GHC/Generics/Lens.hs
@@ -58,7 +58,7 @@ import           GHC.Exts (Char(..), Double(..), Float(..),
 import qualified GHC.Generics as Generic
 import           GHC.Generics hiding (from, to)
 
-#if !(MIN_VERSION_base(4,9,0))
+#if !(MIN_VERSION_base(4,9,0)) || defined(ETA_VERSION)
 import           Generics.Deriving.Base hiding (from, to)
 #endif
 
diff --git a/src/Numeric/Lens.hs b/src/Numeric/Lens.hs
index c54d59f..96b460f 100644
--- a/src/Numeric/Lens.hs
+++ b/src/Numeric/Lens.hs
@@ -70,7 +70,7 @@ pattern Integral a <- (preview integral -> Just a) where
 --
 -- >>> 1767707668033969 ^. re (base 36)
 -- "helloworld"
-base :: (HasCallStack, Integral a) => Int -> Prism' String a
+base :: Integral a => Int -> Prism' String a
 base b
   | b < 2 || b > 36 = error ("base: Invalid base " ++ show b)
   | otherwise       = prism intShow intRead
@@ -84,14 +84,14 @@ base b
 {-# INLINE base #-}
 
 -- | Like 'Data.Char.intToDigit', but handles up to base-36
-intToDigit' :: HasCallStack => Int -> Char
+intToDigit' :: Int -> Char
 intToDigit' i
   | i >= 0  && i < 10 = chr (ord '0' + i)
   | i >= 10 && i < 36 = chr (ord 'a' + i - 10)
   | otherwise = error ("intToDigit': Invalid int " ++ show i)
 
 -- | Like 'Data.Char.digitToInt', but handles up to base-36
-digitToInt' :: HasCallStack => Char -> Int
+digitToInt' :: Char -> Int
 digitToInt' c = fromMaybe (error ("digitToInt': Invalid digit " ++ show c))
                           (digitToIntMay c)
 
-- 
2.15.2 (Apple Git-101.1)

