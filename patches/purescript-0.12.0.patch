From 12e05c19934395e5759d21d108fd2f98d6b586a5 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Thu, 9 Aug 2018 22:39:48 +0530
Subject: [PATCH] Patched

---
 src/Control/Monad/Supply/Class.hs                     |  4 +++-
 src/Language/PureScript/Docs/Convert/ReExports.hs     |  7 +++++++
 src/Language/PureScript/Docs/RenderedCode/Types.hs    |  2 +-
 src/Language/PureScript/Errors.hs                     |  2 +-
 src/Language/PureScript/Ide/Filter.hs                 |  2 +-
 src/Language/PureScript/Ide/Matcher.hs                |  2 +-
 src/Language/PureScript/Label.hs                      |  2 +-
 src/Language/PureScript/PSString.hs                   |  2 +-
 src/Language/PureScript/Pretty/Common.hs              |  9 +++++++--
 src/Language/PureScript/Pretty/Types.hs               |  2 +-
 src/Language/PureScript/Pretty/Values.hs              |  2 +-
 src/Language/PureScript/Publish/ErrorsWarnings.hs     |  7 +++++++
 src/Language/PureScript/Sugar/Names.hs                |  3 ++-
 src/Language/PureScript/Sugar/TypeClasses/Deriving.hs |  9 ++++++++-
 src/Language/PureScript/TypeChecker/Entailment.hs     | 10 +++++++++-
 src/Language/PureScript/TypeChecker/Monad.hs          |  3 ++-
 16 files changed, 53 insertions(+), 15 deletions(-)

diff --git a/src/Control/Monad/Supply/Class.hs b/src/Control/Monad/Supply/Class.hs
index 64038a6..7593672 100644
--- a/src/Control/Monad/Supply/Class.hs
+++ b/src/Control/Monad/Supply/Class.hs
@@ -13,6 +13,7 @@ import Control.Monad.Supply
 import Control.Monad.State
 import Control.Monad.Writer
 import Data.Text (Text, pack)
+import Data.Function
 
 class Monad m => MonadSupply m where
   fresh :: m Integer
@@ -25,7 +26,8 @@ class Monad m => MonadSupply m where
 instance Monad m => MonadSupply (SupplyT m) where
   fresh = SupplyT $ do
     n <- get
-    put (n + 1)
+    let n' = trampoline n + 1
+    n' `seq` put n'
     return n
   peek = SupplyT get
 
diff --git a/src/Language/PureScript/Docs/Convert/ReExports.hs b/src/Language/PureScript/Docs/Convert/ReExports.hs
index 4d48cb1..046469b 100644
--- a/src/Language/PureScript/Docs/Convert/ReExports.hs
+++ b/src/Language/PureScript/Docs/Convert/ReExports.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 module Language.PureScript.Docs.Convert.ReExports
   ( updateReExports
   ) where
@@ -421,6 +422,12 @@ instance Monoid TypeClassEnv where
   mappend (TypeClassEnv a1 b1 c1)
           (TypeClassEnv a2 b2 c2) =
     TypeClassEnv (a1 <> a2) (b1 <> b2) (c1 <> c2)
+#if MIN_VERSION_base(4,10,0)
+instance Semigroup TypeClassEnv where
+  (<>) (TypeClassEnv a1 b1 c1)
+          (TypeClassEnv a2 b2 c2) =
+    TypeClassEnv (a1 <> a2) (b1 <> b2) (c1 <> c2)
+#endif
 
 -- |
 -- Take a TypeClassEnv and handle all of the type class members in it, either
diff --git a/src/Language/PureScript/Docs/RenderedCode/Types.hs b/src/Language/PureScript/Docs/RenderedCode/Types.hs
index 0d64e30..59ea57c 100644
--- a/src/Language/PureScript/Docs/RenderedCode/Types.hs
+++ b/src/Language/PureScript/Docs/RenderedCode/Types.hs
@@ -248,7 +248,7 @@ asRenderedCodeElement =
 --
 newtype RenderedCode
   = RC { unRC :: [RenderedCodeElement] }
-  deriving (Show, Eq, Ord, Monoid)
+  deriving (Show, Eq, Ord, Monoid, Semigroup)
 
 instance A.ToJSON RenderedCode where
   toJSON (RC elems) = A.toJSON elems
diff --git a/src/Language/PureScript/Errors.hs b/src/Language/PureScript/Errors.hs
index 135f98a..45c3dd1 100644
--- a/src/Language/PureScript/Errors.hs
+++ b/src/Language/PureScript/Errors.hs
@@ -186,7 +186,7 @@ errorCode em = case unwrapErrorMessage em of
 -- | A stack trace for an error
 newtype MultipleErrors = MultipleErrors
   { runMultipleErrors :: [ErrorMessage]
-  } deriving (Show, Monoid)
+  } deriving (Show, Monoid, Semigroup)
 
 -- | Check whether a collection of errors is empty or not.
 nonEmpty :: MultipleErrors -> Bool
diff --git a/src/Language/PureScript/Ide/Filter.hs b/src/Language/PureScript/Ide/Filter.hs
index cdb29f4..adc68f5 100644
--- a/src/Language/PureScript/Ide/Filter.hs
+++ b/src/Language/PureScript/Ide/Filter.hs
@@ -35,7 +35,7 @@ import           Language.PureScript.Ide.Util
 import qualified Language.PureScript           as P
 
 newtype Filter = Filter (Endo [Module])
-  deriving (Monoid)
+  deriving (Monoid, Semigroup)
 
 type Module = (P.ModuleName, [IdeDeclarationAnn])
 
diff --git a/src/Language/PureScript/Ide/Matcher.hs b/src/Language/PureScript/Ide/Matcher.hs
index 531a29e..3120182 100644
--- a/src/Language/PureScript/Ide/Matcher.hs
+++ b/src/Language/PureScript/Ide/Matcher.hs
@@ -35,7 +35,7 @@ import           Text.Regex.TDFA               ((=~))
 
 type ScoredMatch a = (Match a, Double)
 
-newtype Matcher a = Matcher (Endo [Match a]) deriving (Monoid)
+newtype Matcher a = Matcher (Endo [Match a]) deriving (Monoid, Semigroup)
 
 instance FromJSON (Matcher IdeDeclarationAnn) where
   parseJSON = withObject "matcher" $ \o -> do
diff --git a/src/Language/PureScript/Label.hs b/src/Language/PureScript/Label.hs
index b00db4f..92324ff 100644
--- a/src/Language/PureScript/Label.hs
+++ b/src/Language/PureScript/Label.hs
@@ -17,6 +17,6 @@ import Language.PureScript.PSString (PSString)
 -- because records are indexable by PureScript strings at runtime.
 --
 newtype Label = Label { runLabel :: PSString }
-  deriving (Show, Eq, Ord, IsString, Monoid, A.ToJSON, A.FromJSON, Generic)
+  deriving (Show, Eq, Ord, IsString, Monoid, Semigroup, A.ToJSON, A.FromJSON, Generic)
 
 instance NFData Label
diff --git a/src/Language/PureScript/PSString.hs b/src/Language/PureScript/PSString.hs
index 0dcb3b4..56e32e9 100644
--- a/src/Language/PureScript/PSString.hs
+++ b/src/Language/PureScript/PSString.hs
@@ -52,7 +52,7 @@ import qualified Data.Aeson.Types as A
 -- and arrays of UTF-16 code units (integers) otherwise.
 --
 newtype PSString = PSString { toUTF16CodeUnits :: [Word16] }
-  deriving (Eq, Ord, Monoid, Generic)
+  deriving (Eq, Ord, Monoid, Semigroup, Generic)
 
 instance NFData PSString
 
diff --git a/src/Language/PureScript/Pretty/Common.hs b/src/Language/PureScript/Pretty/Common.hs
index b728023..6a2c410 100644
--- a/src/Language/PureScript/Pretty/Common.hs
+++ b/src/Language/PureScript/Pretty/Common.hs
@@ -1,4 +1,4 @@
-{-# LANGUAGE GeneralizedNewtypeDeriving #-}
+{-# LANGUAGE GeneralizedNewtypeDeriving, CPP #-}
 
 -- |
 -- Common pretty-printing utility functions
@@ -69,6 +69,11 @@ instance Monoid StrPos where
       plus :: (SourcePos, [[SMap]]) -> StrPos -> (SourcePos, [[SMap]])
       plus (a, c) (StrPos (a', _, c')) = (a `addPos` a', (bumpPos a <$> c') : c)
 
+#if MIN_VERSION_base(4,10,0)
+instance Semigroup StrPos where
+  StrPos (a,b,c) <> StrPos (a',b',c') = StrPos (a `addPos` a', b <> b', c ++ (bumpPos a <$> c'))
+#endif
+
 instance Emit StrPos where
   -- |
   -- Augment a string with its length (rows/column)
@@ -88,7 +93,7 @@ instance Emit StrPos where
       mapping = SMap (T.pack file) startPos zeroPos
       zeroPos = SourcePos 0 0
 
-newtype PlainString = PlainString Text deriving Monoid
+newtype PlainString = PlainString Text deriving (Semigroup, Monoid)
 
 runPlainString :: PlainString -> Text
 runPlainString (PlainString s) = s
diff --git a/src/Language/PureScript/Pretty/Types.hs b/src/Language/PureScript/Pretty/Types.hs
index bee62db..40c2956 100644
--- a/src/Language/PureScript/Pretty/Types.hs
+++ b/src/Language/PureScript/Pretty/Types.hs
@@ -14,7 +14,7 @@ module Language.PureScript.Pretty.Types
   , prettyPrintObjectKey
   ) where
 
-import Prelude.Compat
+import Prelude.Compat hiding ((<>))
 
 import Control.Arrow ((<+>))
 import Control.PatternArrows as PA
diff --git a/src/Language/PureScript/Pretty/Values.hs b/src/Language/PureScript/Pretty/Values.hs
index bbabf08..7902526 100644
--- a/src/Language/PureScript/Pretty/Values.hs
+++ b/src/Language/PureScript/Pretty/Values.hs
@@ -7,7 +7,7 @@ module Language.PureScript.Pretty.Values
   , prettyPrintBinderAtom
   ) where
 
-import Prelude.Compat
+import Prelude.Compat hiding ((<>))
 
 import Control.Arrow (second)
 
diff --git a/src/Language/PureScript/Publish/ErrorsWarnings.hs b/src/Language/PureScript/Publish/ErrorsWarnings.hs
index 8067395..c2825d3 100644
--- a/src/Language/PureScript/Publish/ErrorsWarnings.hs
+++ b/src/Language/PureScript/Publish/ErrorsWarnings.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 module Language.PureScript.Publish.ErrorsWarnings
   ( PackageError(..)
   , PackageWarning(..)
@@ -316,6 +317,12 @@ instance Monoid CollectedWarnings where
   mappend (CollectedWarnings as bs cs d es)
           (CollectedWarnings as' bs' cs' d' es') =
     CollectedWarnings (as <> as') (bs <> bs') (cs <> cs') (d <> d') (es <> es')
+#if MIN_VERSION_base(4,10,0)
+instance Semigroup CollectedWarnings where
+  (<>) (CollectedWarnings as bs cs d es)
+          (CollectedWarnings as' bs' cs' d' es') =
+    CollectedWarnings (as <> as') (bs <> bs') (cs <> cs') (d <> d') (es <> es')
+#endif
 
 collectWarnings :: [PackageWarning] -> CollectedWarnings
 collectWarnings = foldMap singular
diff --git a/src/Language/PureScript/Sugar/Names.hs b/src/Language/PureScript/Sugar/Names.hs
index afa770f..69d739b 100644
--- a/src/Language/PureScript/Sugar/Names.hs
+++ b/src/Language/PureScript/Sugar/Names.hs
@@ -19,6 +19,7 @@ import Control.Monad.State.Lazy
 import Control.Monad.Writer (MonadWriter(..), censor)
 
 import Data.Maybe (fromMaybe, mapMaybe)
+import Data.Function (trampoline)
 import qualified Data.Map as M
 import qualified Data.Set as S
 
@@ -115,7 +116,7 @@ desugarImportsWithEnv externs modules = do
       let (_, imps, exps) = fromMaybe (internalError "Module is missing in renameInModule'") $ M.lookup mn env
       (m', used) <- flip runStateT M.empty $ renameInModule imps m
       let m'' = elaborateExports exps m'
-      lintImports m'' env used
+      lintImports m'' env (trampoline used)
       return m''
 
 -- |
diff --git a/src/Language/PureScript/Sugar/TypeClasses/Deriving.hs b/src/Language/PureScript/Sugar/TypeClasses/Deriving.hs
index a91cbe7..56d20b2 100644
--- a/src/Language/PureScript/Sugar/TypeClasses/Deriving.hs
+++ b/src/Language/PureScript/Sugar/TypeClasses/Deriving.hs
@@ -1,4 +1,5 @@
 -- | This module implements the generic deriving elaboration that takes place during desugaring.
+{-# LANGUAGE CPP #-}
 module Language.PureScript.Sugar.TypeClasses.Deriving (deriveInstances) where
 
 import           Prelude.Compat
@@ -48,7 +49,13 @@ instance Monoid NewtypeDerivedInstances where
     NewtypeDerivedInstances { ndiClasses          = ndiClasses          x <> ndiClasses          y
                             , ndiDerivedInstances = ndiDerivedInstances x <> ndiDerivedInstances y
                             }
-
+#if MIN_VERSION_base(4,10,0)
+instance Semigroup NewtypeDerivedInstances where
+  (<>) x y =
+    NewtypeDerivedInstances { ndiClasses          = ndiClasses          x <> ndiClasses          y
+                            , ndiDerivedInstances = ndiDerivedInstances x <> ndiDerivedInstances y
+                            }
+#endif
 -- | Extract the name of the newtype appearing in the last type argument of
 -- a derived newtype instance.
 --
diff --git a/src/Language/PureScript/TypeChecker/Entailment.hs b/src/Language/PureScript/TypeChecker/Entailment.hs
index b11f064..f04af7f 100644
--- a/src/Language/PureScript/TypeChecker/Entailment.hs
+++ b/src/Language/PureScript/TypeChecker/Entailment.hs
@@ -1,4 +1,4 @@
-{-# LANGUAGE NamedFieldPuns #-}
+{-# LANGUAGE NamedFieldPuns, CPP #-}
 
 -- |
 -- Type class entailment
@@ -143,6 +143,14 @@ instance Monoid t => Monoid (Matched t) where
   mappend _         Apart     = Apart
   mappend _         _         = Unknown
 
+#if MIN_VERSION_base(4,10,0)
+instance Semigroup t => Semigroup (Matched t) where
+  (<>) (Match l) (Match r)  = Match (l <> r)
+  (<>)  Apart     _         = Apart
+  (<>)  _         Apart     = Apart
+  (<>)  _         _         = Unknown
+#endif
+
 -- | Check that the current set of type class dictionaries entail the specified type class goal, and, if so,
 -- return a type class dictionary reference.
 entails
diff --git a/src/Language/PureScript/TypeChecker/Monad.hs b/src/Language/PureScript/TypeChecker/Monad.hs
index dcc40cc..5b64a93 100644
--- a/src/Language/PureScript/TypeChecker/Monad.hs
+++ b/src/Language/PureScript/TypeChecker/Monad.hs
@@ -13,6 +13,7 @@ import Control.Monad.Error.Class (MonadError(..))
 import Control.Monad.State
 import Control.Monad.Writer.Class (MonadWriter(..), censor)
 
+import Data.Function (trampoline)
 import Data.Maybe
 import qualified Data.Map as M
 import Data.Text (Text)
@@ -307,7 +308,7 @@ withFreshSubstitution ma = do
   orig <- get
   modify $ \st -> st { checkSubstitution = emptySubstitution }
   a <- ma
-  modify $ \st -> st { checkSubstitution = checkSubstitution orig }
+  modify $ \st -> (trampoline st) { checkSubstitution = checkSubstitution orig }
   return a
 
 withoutWarnings
-- 
2.7.4 (Apple Git-66)

